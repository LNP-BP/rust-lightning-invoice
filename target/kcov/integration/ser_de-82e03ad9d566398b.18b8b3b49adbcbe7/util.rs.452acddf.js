var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin Hashes Library"},
{"lineNum":"    2","line":"// Written in 2018 by"},
{"lineNum":"    3","line":"//   Andrew Poelstra <apoelstra@wpsoftware.net>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    6","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    7","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    8","line":"// any warranty."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   11","line":"// along with this software."},
{"lineNum":"   12","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   13","line":"//"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"/// Circular left-shift a 32-bit word"},
{"lineNum":"   16","line":"macro_rules! circular_lshift32 ("},
{"lineNum":"   17","line":"    ($shift:expr, $w:expr) => (($w << $shift) | ($w >> (32 - $shift)))"},
{"lineNum":"   18","line":");"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"/// Circular left-shift a 64-bit word"},
{"lineNum":"   21","line":"macro_rules! circular_lshift64 ("},
{"lineNum":"   22","line":"    ($shift:expr, $w:expr) => (($w << $shift) | ($w >> (64 - $shift)))"},
{"lineNum":"   23","line":");"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#[macro_export]"},
{"lineNum":"   26","line":"/// Adds hexadecimal formatting implementation of a trait `$imp` to a given type `$ty`"},
{"lineNum":"   27","line":"macro_rules! hex_fmt_impl("},
{"lineNum":"   28","line":"    ($imp:ident, $ty:ident) => ("},
{"lineNum":"   29","line":"        hex_fmt_impl!($imp, $ty, );"},
{"lineNum":"   30","line":"    );"},
{"lineNum":"   31","line":"    ($imp:ident, $ty:ident, $($gen:ident: $gent:ident),*) => ("},
{"lineNum":"   32","line":"        impl<$($gen: $gent),*> $crate::core::fmt::$imp for $ty<$($gen),*> {"},
{"lineNum":"   33","line":"            fn fmt(&self, f: &mut $crate::core::fmt::Formatter) -> $crate::core::fmt::Result {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"                use $crate::hex::{format_hex, format_hex_reverse};"},
{"lineNum":"   35","line":"                if $ty::<$($gen),*>::DISPLAY_BACKWARD {"},
{"lineNum":"   36","line":"                    format_hex_reverse(&self.0, f)"},
{"lineNum":"   37","line":"                } else {"},
{"lineNum":"   38","line":"                    format_hex(&self.0, f)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"                }"},
{"lineNum":"   40","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   41","line":"        }"},
{"lineNum":"   42","line":"    )"},
{"lineNum":"   43","line":");"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"/// Adds `core::ops::Index` trait implementation to a given type `$ty`"},
{"lineNum":"   46","line":"#[macro_export]"},
{"lineNum":"   47","line":"macro_rules! index_impl("},
{"lineNum":"   48","line":"    ($ty:ident) => ("},
{"lineNum":"   49","line":"        index_impl!($ty, );"},
{"lineNum":"   50","line":"    );"},
{"lineNum":"   51","line":"    ($ty:ident, $($gen:ident: $gent:ident),*) => ("},
{"lineNum":"   52","line":"        impl<$($gen: $gent),*> $crate::core::ops::Index<usize> for $ty<$($gen),*> {"},
{"lineNum":"   53","line":"            type Output = u8;"},
{"lineNum":"   54","line":"            fn index(&self, index: usize) -> &u8 {"},
{"lineNum":"   55","line":"                &self.0[index]"},
{"lineNum":"   56","line":"            }"},
{"lineNum":"   57","line":"        }"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"        impl<$($gen: $gent),*> $crate::core::ops::Index<$crate::core::ops::Range<usize>> for $ty<$($gen),*> {"},
{"lineNum":"   60","line":"            type Output = [u8];"},
{"lineNum":"   61","line":"            fn index(&self, index: $crate::core::ops::Range<usize>) -> &[u8] {"},
{"lineNum":"   62","line":"                &self.0[index]"},
{"lineNum":"   63","line":"            }"},
{"lineNum":"   64","line":"        }"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        impl<$($gen: $gent),*> $crate::core::ops::Index<$crate::core::ops::RangeFrom<usize>> for $ty<$($gen),*> {"},
{"lineNum":"   67","line":"            type Output = [u8];"},
{"lineNum":"   68","line":"            fn index(&self, index: $crate::core::ops::RangeFrom<usize>) -> &[u8] {"},
{"lineNum":"   69","line":"                &self.0[index]"},
{"lineNum":"   70","line":"            }"},
{"lineNum":"   71","line":"        }"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"        impl<$($gen: $gent),*> $crate::core::ops::Index<$crate::core::ops::RangeTo<usize>> for $ty<$($gen),*> {"},
{"lineNum":"   74","line":"            type Output = [u8];"},
{"lineNum":"   75","line":"            fn index(&self, index: $crate::core::ops::RangeTo<usize>) -> &[u8] {"},
{"lineNum":"   76","line":"                &self.0[index]"},
{"lineNum":"   77","line":"            }"},
{"lineNum":"   78","line":"        }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        impl<$($gen: $gent),*> $crate::core::ops::Index<$crate::core::ops::RangeFull> for $ty<$($gen),*> {"},
{"lineNum":"   81","line":"            type Output = [u8];"},
{"lineNum":"   82","line":"            fn index(&self, index: $crate::core::ops::RangeFull) -> &[u8] {","class":"lineCov","hits":"1","order":"2215","possible_hits":"1",},
{"lineNum":"   83","line":"                &self.0[index]","class":"lineCov","hits":"1","order":"2216","possible_hits":"1",},
{"lineNum":"   84","line":"            }","class":"linePartCov","hits":"1","order":"2222","possible_hits":"2",},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":"    )"},
{"lineNum":"   87","line":");"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"/// Adds slicing traits implementations to a given type `$ty`"},
{"lineNum":"   90","line":"#[macro_export]"},
{"lineNum":"   91","line":"macro_rules! borrow_slice_impl("},
{"lineNum":"   92","line":"    ($ty:ident) => ("},
{"lineNum":"   93","line":"        borrow_slice_impl!($ty, );"},
{"lineNum":"   94","line":"    );"},
{"lineNum":"   95","line":"    ($ty:ident, $($gen:ident: $gent:ident),*) => ("},
{"lineNum":"   96","line":"        impl<$($gen: $gent),*> $crate::core::borrow::Borrow<[u8]> for $ty<$($gen),*>  {"},
{"lineNum":"   97","line":"            fn borrow(&self) -> &[u8] {"},
{"lineNum":"   98","line":"                &self[..]"},
{"lineNum":"   99","line":"            }"},
{"lineNum":"  100","line":"        }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        impl<$($gen: $gent),*> $crate::core::convert::AsRef<[u8]> for $ty<$($gen),*>  {"},
{"lineNum":"  103","line":"            fn as_ref(&self) -> &[u8] {"},
{"lineNum":"  104","line":"                &self[..]"},
{"lineNum":"  105","line":"            }"},
{"lineNum":"  106","line":"        }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"        impl<$($gen: $gent),*> $crate::core::ops::Deref for $ty<$($gen),*> {"},
{"lineNum":"  109","line":"            type Target = [u8];"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"            fn deref(&self) -> &Self::Target {"},
{"lineNum":"  112","line":"                &self.0"},
{"lineNum":"  113","line":"            }"},
{"lineNum":"  114","line":"        }"},
{"lineNum":"  115","line":"    )"},
{"lineNum":"  116","line":");"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"macro_rules! engine_input_impl("},
{"lineNum":"  119","line":"    () => ("},
{"lineNum":"  120","line":"        #[cfg(not(feature = \"fuzztarget\"))]"},
{"lineNum":"  121","line":"        fn input(&mut self, mut inp: &[u8]) {","class":"lineCov","hits":"1","order":"2342","possible_hits":"1",},
{"lineNum":"  122","line":"            while !inp.is_empty() {","class":"lineCov","hits":"2","order":"2343","possible_hits":"2",},
{"lineNum":"  123","line":"                let buf_idx = self.length % <Self as EngineTrait>::BLOCK_SIZE;","class":"lineCov","hits":"1","order":"2346","possible_hits":"1",},
{"lineNum":"  124","line":"                let rem_len = <Self as EngineTrait>::BLOCK_SIZE - buf_idx;","class":"linePartCov","hits":"1","order":"2347","possible_hits":"2",},
{"lineNum":"  125","line":"                let write_len = cmp::min(rem_len, inp.len());","class":"lineCov","hits":"1","order":"2348","possible_hits":"1",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"                self.buffer[buf_idx..buf_idx + write_len]","class":"linePartCov","hits":"2","order":"2358","possible_hits":"3",},
{"lineNum":"  128","line":"                    .copy_from_slice(&inp[..write_len]);","class":"lineCov","hits":"1","order":"2363","possible_hits":"1",},
{"lineNum":"  129","line":"                self.length += write_len;","class":"linePartCov","hits":"1","order":"2372","possible_hits":"3",},
{"lineNum":"  130","line":"                if self.length % <Self as EngineTrait>::BLOCK_SIZE == 0 {","class":"lineCov","hits":"2","order":"2373","possible_hits":"2",},
{"lineNum":"  131","line":"                    self.process_block();","class":"lineCov","hits":"1","order":"2374","possible_hits":"1",},
{"lineNum":"  132","line":"                }"},
{"lineNum":"  133","line":"                inp = &inp[write_len..];","class":"lineCov","hits":"1","order":"2543","possible_hits":"1",},
{"lineNum":"  134","line":"            }"},
{"lineNum":"  135","line":"        }","class":"lineCov","hits":"1","order":"2548","possible_hits":"1",},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"        #[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"  138","line":"        fn input(&mut self, inp: &[u8]) {"},
{"lineNum":"  139","line":"            for c in inp {"},
{"lineNum":"  140","line":"                self.buffer[0] ^= *c;"},
{"lineNum":"  141","line":"            }"},
{"lineNum":"  142","line":"            self.length += inp.len();"},
{"lineNum":"  143","line":"        }"},
{"lineNum":"  144","line":"    )"},
{"lineNum":"  145","line":");"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"macro_rules! define_slice_to_be {"},
{"lineNum":"  150","line":"    ($name: ident, $type: ty) => {"},
{"lineNum":"  151","line":"        #[inline]"},
{"lineNum":"  152","line":"        pub fn $name(slice: &[u8]) -> $type {","class":"lineCov","hits":"1","order":"2427","possible_hits":"1",},
{"lineNum":"  153","line":"            assert_eq!(slice.len(), ::core::mem::size_of::<$type>());","class":"linePartCov","hits":"1","order":"2428","possible_hits":"2",},
{"lineNum":"  154","line":"            let mut res = 0;","class":"lineCov","hits":"1","order":"2429","possible_hits":"1",},
{"lineNum":"  155","line":"            for i in 0..::core::mem::size_of::<$type>() {","class":"linePartCov","hits":"3","order":"2430","possible_hits":"4",},
{"lineNum":"  156","line":"                res |= (slice[i] as $type) << (::core::mem::size_of::<$type>() - i - 1)*8;","class":"linePartCov","hits":"2","order":"2454","possible_hits":"3",},
{"lineNum":"  157","line":"            }"},
{"lineNum":"  158","line":"            res","class":"lineCov","hits":"1","order":"2456","possible_hits":"1",},
{"lineNum":"  159","line":"        }","class":"lineCov","hits":"1","order":"2457","possible_hits":"1",},
{"lineNum":"  160","line":"    }"},
{"lineNum":"  161","line":"}"},
{"lineNum":"  162","line":"macro_rules! define_slice_to_le {"},
{"lineNum":"  163","line":"    ($name: ident, $type: ty) => {"},
{"lineNum":"  164","line":"        #[inline]"},
{"lineNum":"  165","line":"        pub fn $name(slice: &[u8]) -> $type {"},
{"lineNum":"  166","line":"            assert_eq!(slice.len(), ::core::mem::size_of::<$type>());"},
{"lineNum":"  167","line":"            let mut res = 0;"},
{"lineNum":"  168","line":"            for i in 0..::core::mem::size_of::<$type>() {"},
{"lineNum":"  169","line":"                res |= (slice[i] as $type) << i*8;"},
{"lineNum":"  170","line":"            }"},
{"lineNum":"  171","line":"            res"},
{"lineNum":"  172","line":"        }"},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":"}"},
{"lineNum":"  175","line":"macro_rules! define_be_to_array {"},
{"lineNum":"  176","line":"    ($name: ident, $type: ty, $byte_len: expr) => {"},
{"lineNum":"  177","line":"        #[inline]"},
{"lineNum":"  178","line":"        pub fn $name(val: $type) -> [u8; $byte_len] {","class":"lineCov","hits":"2","order":"2559","possible_hits":"2",},
{"lineNum":"  179","line":"            assert_eq!(::core::mem::size_of::<$type>(), $byte_len); // size_of isn\'t a constfn in 1.22","class":"linePartCov","hits":"2","order":"2560","possible_hits":"4",},
{"lineNum":"  180","line":"            let mut res = [0; $byte_len];","class":"lineCov","hits":"2","order":"2561","possible_hits":"2",},
{"lineNum":"  181","line":"            for i in 0..$byte_len {","class":"linePartCov","hits":"6","order":"2562","possible_hits":"8",},
{"lineNum":"  182","line":"                res[i] = ((val >> ($byte_len - i - 1)*8) & 0xff) as u8;","class":"linePartCov","hits":"2","order":"2563","possible_hits":"4",},
{"lineNum":"  183","line":"            }"},
{"lineNum":"  184","line":"            res","class":"lineCov","hits":"2","order":"2564","possible_hits":"2",},
{"lineNum":"  185","line":"        }","class":"lineCov","hits":"2","order":"2565","possible_hits":"2",},
{"lineNum":"  186","line":"    }"},
{"lineNum":"  187","line":"}"},
{"lineNum":"  188","line":"macro_rules! define_le_to_array {"},
{"lineNum":"  189","line":"    ($name: ident, $type: ty, $byte_len: expr) => {"},
{"lineNum":"  190","line":"        #[inline]"},
{"lineNum":"  191","line":"        pub fn $name(val: $type) -> [u8; $byte_len] {"},
{"lineNum":"  192","line":"            assert_eq!(::core::mem::size_of::<$type>(), $byte_len); // size_of isn\'t a constfn in 1.22"},
{"lineNum":"  193","line":"            let mut res = [0; $byte_len];"},
{"lineNum":"  194","line":"            for i in 0..$byte_len {"},
{"lineNum":"  195","line":"                res[i] = ((val >> i*8) & 0xff) as u8;"},
{"lineNum":"  196","line":"            }"},
{"lineNum":"  197","line":"            res"},
{"lineNum":"  198","line":"        }"},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":"}"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"define_slice_to_be!(slice_to_u32_be, u32);"},
{"lineNum":"  203","line":"define_slice_to_be!(slice_to_u64_be, u64);"},
{"lineNum":"  204","line":"define_be_to_array!(u32_to_array_be, u32, 4);"},
{"lineNum":"  205","line":"define_be_to_array!(u64_to_array_be, u64, 8);"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"define_slice_to_le!(slice_to_u32_le, u32);"},
{"lineNum":"  208","line":"define_slice_to_le!(slice_to_u64_le, u64);"},
{"lineNum":"  209","line":"define_le_to_array!(u32_to_array_le, u32, 4);"},
{"lineNum":"  210","line":"define_le_to_array!(u64_to_array_le, u64, 8);"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"#[cfg(test)]"},
{"lineNum":"  213","line":"mod test {"},
{"lineNum":"  214","line":"    use Hash;"},
{"lineNum":"  215","line":"    use sha256;"},
{"lineNum":"  216","line":"    use super::*;"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    #[test]"},
{"lineNum":"  219","line":"    fn borrow_slice_impl_to_vec() {"},
{"lineNum":"  220","line":"        // Test that the borrow_slice_impl macro gives to_vec."},
{"lineNum":"  221","line":"        let hash = sha256::Hash::hash(&[3, 50]);"},
{"lineNum":"  222","line":"        assert_eq!(hash.to_vec().len(), sha256::Hash::LEN);"},
{"lineNum":"  223","line":"    }"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    #[test]"},
{"lineNum":"  226","line":"    fn endianness_test() {"},
{"lineNum":"  227","line":"        assert_eq!(slice_to_u32_be(&[0xde, 0xad, 0xbe, 0xef]), 0xdeadbeef);"},
{"lineNum":"  228","line":"        assert_eq!(slice_to_u64_be(&[0x1b, 0xad, 0xca, 0xfe, 0xde, 0xad, 0xbe, 0xef]), 0x1badcafedeadbeef);"},
{"lineNum":"  229","line":"        assert_eq!(u32_to_array_be(0xdeadbeef), [0xde, 0xad, 0xbe, 0xef]);"},
{"lineNum":"  230","line":"        assert_eq!(u64_to_array_be(0x1badcafedeadbeef), [0x1b, 0xad, 0xca, 0xfe, 0xde, 0xad, 0xbe, 0xef]);"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"        assert_eq!(slice_to_u32_le(&[0xef, 0xbe, 0xad, 0xde]), 0xdeadbeef);"},
{"lineNum":"  233","line":"        assert_eq!(slice_to_u64_le(&[0xef, 0xbe, 0xad, 0xde, 0xfe, 0xca, 0xad, 0x1b]), 0x1badcafedeadbeef);"},
{"lineNum":"  234","line":"        assert_eq!(u32_to_array_le(0xdeadbeef), [0xef, 0xbe, 0xad, 0xde]);"},
{"lineNum":"  235","line":"        assert_eq!(u64_to_array_le(0x1badcafedeadbeef), [0xef, 0xbe, 0xad, 0xde, 0xfe, 0xca, 0xad, 0x1b]);"},
{"lineNum":"  236","line":"    }"},
{"lineNum":"  237","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "ser_de-82e03ad9d566398b", "date" : "2020-05-23 13:12:49", "instrumented" : 32, "covered" : 29,};
var merged_data = [];
