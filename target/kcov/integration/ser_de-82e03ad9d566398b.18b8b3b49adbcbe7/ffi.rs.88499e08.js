var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin secp256k1 bindings"},
{"lineNum":"    2","line":"// Written in 2014 by"},
{"lineNum":"    3","line":"//   Dawid Ciężarkiewicz"},
{"lineNum":"    4","line":"//   Andrew Poelstra"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    7","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    8","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    9","line":"// any warranty."},
{"lineNum":"   10","line":"//"},
{"lineNum":"   11","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   12","line":"// along with this software."},
{"lineNum":"   13","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"//! # FFI bindings"},
{"lineNum":"   17","line":"//! Direct bindings to the underlying C library functions. These should"},
{"lineNum":"   18","line":"//! not be needed for most users."},
{"lineNum":"   19","line":"use core::{mem, hash, slice, ptr};"},
{"lineNum":"   20","line":"use types::*;"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/// Flag for context to enable no precomputation"},
{"lineNum":"   23","line":"pub const SECP256K1_START_NONE: c_uint = 1;"},
{"lineNum":"   24","line":"/// Flag for context to enable verification precomputation"},
{"lineNum":"   25","line":"pub const SECP256K1_START_VERIFY: c_uint = 1 | (1 << 8);"},
{"lineNum":"   26","line":"/// Flag for context to enable signing precomputation"},
{"lineNum":"   27","line":"pub const SECP256K1_START_SIGN: c_uint = 1 | (1 << 9);"},
{"lineNum":"   28","line":"/// Flag for keys to indicate uncompressed serialization format"},
{"lineNum":"   29","line":"pub const SECP256K1_SER_UNCOMPRESSED: c_uint = (1 << 1);"},
{"lineNum":"   30","line":"/// Flag for keys to indicate compressed serialization format"},
{"lineNum":"   31","line":"pub const SECP256K1_SER_COMPRESSED: c_uint = (1 << 1) | (1 << 8);"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"/// A nonce generation function. Ordinary users of the library"},
{"lineNum":"   34","line":"/// never need to see this type; only if you need to control"},
{"lineNum":"   35","line":"/// nonce generation do you need to use it. I have deliberately"},
{"lineNum":"   36","line":"/// made this hard to do: you have to write your own wrapper"},
{"lineNum":"   37","line":"/// around the FFI functions to use it. And it\'s an unsafe type."},
{"lineNum":"   38","line":"/// Nonces are generated deterministically by RFC6979 by"},
{"lineNum":"   39","line":"/// default; there should be no need to ever change this."},
{"lineNum":"   40","line":"pub type NonceFn = unsafe extern \"C\" fn(nonce32: *mut c_uchar,"},
{"lineNum":"   41","line":"                                        msg32: *const c_uchar,"},
{"lineNum":"   42","line":"                                        key32: *const c_uchar,"},
{"lineNum":"   43","line":"                                        algo16: *const c_uchar,"},
{"lineNum":"   44","line":"                                        attempt: c_uint,"},
{"lineNum":"   45","line":"                                        data: *const c_void);"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"/// Hash function to use to post-process an ECDH point to get"},
{"lineNum":"   48","line":"/// a shared secret."},
{"lineNum":"   49","line":"pub type EcdhHashFn = unsafe extern \"C\" fn("},
{"lineNum":"   50","line":"    output: *mut c_uchar,"},
{"lineNum":"   51","line":"    x: *const c_uchar,"},
{"lineNum":"   52","line":"    y: *const c_uchar,"},
{"lineNum":"   53","line":"    data: *const c_void,"},
{"lineNum":"   54","line":");"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"/// A Secp256k1 context, containing various precomputed values and such"},
{"lineNum":"   57","line":"/// needed to do elliptic curve computations. If you create one of these"},
{"lineNum":"   58","line":"/// with `secp256k1_context_create` you MUST destroy it with"},
{"lineNum":"   59","line":"/// `secp256k1_context_destroy`, or else you will have a memory leak."},
{"lineNum":"   60","line":"#[derive(Clone, Debug)]"},
{"lineNum":"   61","line":"#[repr(C)] pub struct Context(c_int);"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"#[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"   64","line":"impl Context {"},
{"lineNum":"   65","line":"    pub fn flags(&self) -> u32 {"},
{"lineNum":"   66","line":"        self.0 as u32"},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":"}"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"/// Library-internal representation of a Secp256k1 public key"},
{"lineNum":"   71","line":"#[repr(C)]"},
{"lineNum":"   72","line":"pub struct PublicKey([c_uchar; 64]);"},
{"lineNum":"   73","line":"impl_array_newtype!(PublicKey, c_uchar, 64);"},
{"lineNum":"   74","line":"impl_raw_debug!(PublicKey);"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"impl PublicKey {"},
{"lineNum":"   77","line":"    /// Create a new (zeroed) public key usable for the FFI interface"},
{"lineNum":"   78","line":"    pub fn new() -> PublicKey { PublicKey([0; 64]) }","class":"lineCov","hits":"2","order":"4912","possible_hits":"2",},
{"lineNum":"   79","line":"    /// Create a new (uninitialized) public key usable for the FFI interface"},
{"lineNum":"   80","line":"    #[deprecated(since = \"0.15.3\", note = \"Please use the new function instead\")]"},
{"lineNum":"   81","line":"    pub unsafe fn blank() -> PublicKey { PublicKey::new() }"},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"impl Default for PublicKey {"},
{"lineNum":"   85","line":"    fn default() -> Self {"},
{"lineNum":"   86","line":"        PublicKey::new()"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":"}"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"impl hash::Hash for PublicKey {"},
{"lineNum":"   91","line":"    fn hash<H: hash::Hasher>(&self, state: &mut H) {"},
{"lineNum":"   92","line":"        state.write(&self.0)"},
{"lineNum":"   93","line":"    }"},
{"lineNum":"   94","line":"}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"/// Library-internal representation of a Secp256k1 signature"},
{"lineNum":"   97","line":"#[repr(C)]"},
{"lineNum":"   98","line":"pub struct Signature([c_uchar; 64]);"},
{"lineNum":"   99","line":"impl_array_newtype!(Signature, c_uchar, 64);"},
{"lineNum":"  100","line":"impl_raw_debug!(Signature);"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"impl Signature {"},
{"lineNum":"  103","line":"    /// Create a new (zeroed) signature usable for the FFI interface"},
{"lineNum":"  104","line":"    pub fn new() -> Signature { Signature([0; 64]) }","class":"lineCov","hits":"2","order":"5420","possible_hits":"2",},
{"lineNum":"  105","line":"    /// Create a new (uninitialized) signature usable for the FFI interface"},
{"lineNum":"  106","line":"    #[deprecated(since = \"0.15.3\", note = \"Please use the new function instead\")]"},
{"lineNum":"  107","line":"    pub unsafe fn blank() -> Signature { Signature::new() }"},
{"lineNum":"  108","line":"}"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"impl Default for Signature {"},
{"lineNum":"  111","line":"    fn default() -> Self {"},
{"lineNum":"  112","line":"        Signature::new()"},
{"lineNum":"  113","line":"    }"},
{"lineNum":"  114","line":"}"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"/// Library-internal representation of an ECDH shared secret"},
{"lineNum":"  117","line":"#[repr(C)]"},
{"lineNum":"  118","line":"pub struct SharedSecret([c_uchar; 32]);"},
{"lineNum":"  119","line":"impl_array_newtype!(SharedSecret, c_uchar, 32);"},
{"lineNum":"  120","line":"impl_raw_debug!(SharedSecret);"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"impl SharedSecret {"},
{"lineNum":"  123","line":"    /// Create a new (zeroed) signature usable for the FFI interface"},
{"lineNum":"  124","line":"    pub fn new() -> SharedSecret { SharedSecret([0; 32]) }"},
{"lineNum":"  125","line":"    /// Create a new (uninitialized) signature usable for the FFI interface"},
{"lineNum":"  126","line":"    #[deprecated(since = \"0.15.3\", note = \"Please use the new function instead\")]"},
{"lineNum":"  127","line":"    pub unsafe fn blank() -> SharedSecret { SharedSecret::new() }"},
{"lineNum":"  128","line":"}"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"impl Default for SharedSecret {"},
{"lineNum":"  131","line":"    fn default() -> Self {"},
{"lineNum":"  132","line":"        SharedSecret::new()"},
{"lineNum":"  133","line":"    }"},
{"lineNum":"  134","line":"}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"#[cfg(not(feature = \"fuzztarget\"))]"},
{"lineNum":"  137","line":"extern \"C\" {"},
{"lineNum":"  138","line":"    /// Default ECDH hash function"},
{"lineNum":"  139","line":"    pub static secp256k1_ecdh_hash_function_default: EcdhHashFn;"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    pub static secp256k1_nonce_function_rfc6979: NonceFn;"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    pub static secp256k1_nonce_function_default: NonceFn;"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    pub static secp256k1_context_no_precomp: *const Context;"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    // Contexts"},
{"lineNum":"  148","line":"    pub fn secp256k1_context_preallocated_size(flags: c_uint) -> usize;"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    pub fn secp256k1_context_preallocated_create(prealloc: *mut c_void, flags: c_uint) -> *mut Context;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    pub fn secp256k1_context_preallocated_destroy(cx: *mut Context);"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    pub fn secp256k1_context_preallocated_clone_size(cx: *const Context) -> usize;"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    pub fn secp256k1_context_preallocated_clone(cx: *const Context, prealloc: *mut c_void) -> *mut Context;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    pub fn secp256k1_context_randomize(cx: *mut Context,"},
{"lineNum":"  159","line":"                                       seed32: *const c_uchar)"},
{"lineNum":"  160","line":"                                       -> c_int;"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    // Pubkeys"},
{"lineNum":"  163","line":"    pub fn secp256k1_ec_pubkey_parse(cx: *const Context, pk: *mut PublicKey,"},
{"lineNum":"  164","line":"                                     input: *const c_uchar, in_len: usize)"},
{"lineNum":"  165","line":"                                     -> c_int;"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    pub fn secp256k1_ec_pubkey_serialize(cx: *const Context, output: *mut c_uchar,"},
{"lineNum":"  168","line":"                                         out_len: *mut usize, pk: *const PublicKey,"},
{"lineNum":"  169","line":"                                         compressed: c_uint)"},
{"lineNum":"  170","line":"                                         -> c_int;"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    // Signatures"},
{"lineNum":"  173","line":"    pub fn secp256k1_ecdsa_signature_parse_der(cx: *const Context, sig: *mut Signature,"},
{"lineNum":"  174","line":"                                               input: *const c_uchar, in_len: usize)"},
{"lineNum":"  175","line":"                                               -> c_int;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    pub fn secp256k1_ecdsa_signature_parse_compact(cx: *const Context, sig: *mut Signature,"},
{"lineNum":"  178","line":"                                                   input64: *const c_uchar)"},
{"lineNum":"  179","line":"                                                   -> c_int;"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    pub fn ecdsa_signature_parse_der_lax(cx: *const Context, sig: *mut Signature,"},
{"lineNum":"  182","line":"                                         input: *const c_uchar, in_len: usize)"},
{"lineNum":"  183","line":"                                         -> c_int;"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    pub fn secp256k1_ecdsa_signature_serialize_der(cx: *const Context, output: *mut c_uchar,"},
{"lineNum":"  186","line":"                                                   out_len: *mut usize, sig: *const Signature)"},
{"lineNum":"  187","line":"                                                   -> c_int;"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    pub fn secp256k1_ecdsa_signature_serialize_compact(cx: *const Context, output64: *const c_uchar,"},
{"lineNum":"  190","line":"                                                       sig: *const Signature)"},
{"lineNum":"  191","line":"                                                       -> c_int;"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    pub fn secp256k1_ecdsa_signature_normalize(cx: *const Context, out_sig: *mut Signature,"},
{"lineNum":"  194","line":"                                               in_sig: *const Signature)"},
{"lineNum":"  195","line":"                                               -> c_int;"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    // ECDSA"},
{"lineNum":"  198","line":"    pub fn secp256k1_ecdsa_verify(cx: *const Context,"},
{"lineNum":"  199","line":"                                  sig: *const Signature,"},
{"lineNum":"  200","line":"                                  msg32: *const c_uchar,"},
{"lineNum":"  201","line":"                                  pk: *const PublicKey)"},
{"lineNum":"  202","line":"                                  -> c_int;"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    pub fn secp256k1_ecdsa_sign(cx: *const Context,"},
{"lineNum":"  205","line":"                                sig: *mut Signature,"},
{"lineNum":"  206","line":"                                msg32: *const c_uchar,"},
{"lineNum":"  207","line":"                                sk: *const c_uchar,"},
{"lineNum":"  208","line":"                                noncefn: NonceFn,"},
{"lineNum":"  209","line":"                                noncedata: *const c_void)"},
{"lineNum":"  210","line":"                                -> c_int;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    // EC"},
{"lineNum":"  213","line":"    pub fn secp256k1_ec_seckey_verify(cx: *const Context,"},
{"lineNum":"  214","line":"                                      sk: *const c_uchar) -> c_int;"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    pub fn secp256k1_ec_pubkey_create(cx: *const Context, pk: *mut PublicKey,"},
{"lineNum":"  217","line":"                                      sk: *const c_uchar) -> c_int;"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"//TODO secp256k1_ec_privkey_export"},
{"lineNum":"  220","line":"//TODO secp256k1_ec_privkey_import"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    pub fn secp256k1_ec_privkey_tweak_add(cx: *const Context,"},
{"lineNum":"  223","line":"                                          sk: *mut c_uchar,"},
{"lineNum":"  224","line":"                                          tweak: *const c_uchar)"},
{"lineNum":"  225","line":"                                          -> c_int;"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    pub fn secp256k1_ec_pubkey_tweak_add(cx: *const Context,"},
{"lineNum":"  228","line":"                                         pk: *mut PublicKey,"},
{"lineNum":"  229","line":"                                         tweak: *const c_uchar)"},
{"lineNum":"  230","line":"                                         -> c_int;"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    pub fn secp256k1_ec_privkey_tweak_mul(cx: *const Context,"},
{"lineNum":"  233","line":"                                          sk: *mut c_uchar,"},
{"lineNum":"  234","line":"                                          tweak: *const c_uchar)"},
{"lineNum":"  235","line":"                                          -> c_int;"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    pub fn secp256k1_ec_pubkey_tweak_mul(cx: *const Context,"},
{"lineNum":"  238","line":"                                         pk: *mut PublicKey,"},
{"lineNum":"  239","line":"                                         tweak: *const c_uchar)"},
{"lineNum":"  240","line":"                                         -> c_int;"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    pub fn secp256k1_ec_pubkey_combine(cx: *const Context,"},
{"lineNum":"  243","line":"                                       out: *mut PublicKey,"},
{"lineNum":"  244","line":"                                       ins: *const *const PublicKey,"},
{"lineNum":"  245","line":"                                       n: c_int)"},
{"lineNum":"  246","line":"                                       -> c_int;"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    pub fn secp256k1_ecdh("},
{"lineNum":"  249","line":"        cx: *const Context,"},
{"lineNum":"  250","line":"        output: *mut SharedSecret,"},
{"lineNum":"  251","line":"        pubkey: *const PublicKey,"},
{"lineNum":"  252","line":"        privkey: *const c_uchar,"},
{"lineNum":"  253","line":"        hashfp: EcdhHashFn,"},
{"lineNum":"  254","line":"        data: *mut c_void,"},
{"lineNum":"  255","line":"    ) -> c_int;"},
{"lineNum":"  256","line":"}"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"#[cfg(feature = \"std\")]"},
{"lineNum":"  260","line":"#[no_mangle]"},
{"lineNum":"  261","line":"/// A reimplementation of the C function `secp256k1_context_create` in rust."},
{"lineNum":"  262","line":"///"},
{"lineNum":"  263","line":"/// This function allocates memory, the pointer should be deallocated using `secp256k1_context_destroy`"},
{"lineNum":"  264","line":"/// A failure to do so will result in a memory leak."},
{"lineNum":"  265","line":"///"},
{"lineNum":"  266","line":"/// This will create a secp256k1 raw context."},
{"lineNum":"  267","line":"// Returns: a newly created context object."},
{"lineNum":"  268","line":"//  In:      flags: which parts of the context to initialize."},
{"lineNum":"  269","line":"pub unsafe extern \"C\" fn secp256k1_context_create(flags: c_uint) -> *mut Context {"},
{"lineNum":"  270","line":"    assert!(mem::align_of::<usize>() >= mem::align_of::<u8>());"},
{"lineNum":"  271","line":"    assert_eq!(mem::size_of::<usize>(), mem::size_of::<&usize>());"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"    let word_size = mem::size_of::<usize>();"},
{"lineNum":"  274","line":"    let n_words = (secp256k1_context_preallocated_size(flags) + word_size - 1) / word_size;"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    let buf = vec![0usize; n_words + 1].into_boxed_slice();"},
{"lineNum":"  277","line":"    let ptr = Box::into_raw(buf) as *mut usize;"},
{"lineNum":"  278","line":"    ::core::ptr::write(ptr, n_words);"},
{"lineNum":"  279","line":"    let ptr: *mut usize = ptr.offset(1);"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    secp256k1_context_preallocated_create(ptr as *mut c_void, flags)"},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"#[cfg(feature = \"std\")]"},
{"lineNum":"  285","line":"#[no_mangle]"},
{"lineNum":"  286","line":"/// A reimplementation of the C function `secp256k1_context_destroy` in rust."},
{"lineNum":"  287","line":"///"},
{"lineNum":"  288","line":"/// This function destroys and deallcates the context created by `secp256k1_context_create`."},
{"lineNum":"  289","line":"///"},
{"lineNum":"  290","line":"/// The pointer shouldn\'t be used after passing to this function, consider it as passing it to `free()`."},
{"lineNum":"  291","line":"///"},
{"lineNum":"  292","line":"pub unsafe extern \"C\" fn secp256k1_context_destroy(ctx: *mut Context) {"},
{"lineNum":"  293","line":"    secp256k1_context_preallocated_destroy(ctx);"},
{"lineNum":"  294","line":"    let ctx: *mut usize = ctx as *mut usize;"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    let n_words_ptr: *mut usize = ctx.offset(-1);"},
{"lineNum":"  297","line":"    let n_words: usize = ::core::ptr::read(n_words_ptr);"},
{"lineNum":"  298","line":"    let slice: &mut [usize] = slice::from_raw_parts_mut(n_words_ptr , n_words+1);"},
{"lineNum":"  299","line":"    let _ = Box::from_raw(slice as *mut [usize]);"},
{"lineNum":"  300","line":"}"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"#[no_mangle]"},
{"lineNum":"  304","line":"/// **This function is an override for the C function, this is the an edited version of the original description:**"},
{"lineNum":"  305","line":"///"},
{"lineNum":"  306","line":"/// A callback function to be called when an illegal argument is passed to"},
{"lineNum":"  307","line":"/// an API call. It will only trigger for violations that are mentioned"},
{"lineNum":"  308","line":"/// explicitly in the header. **This will cause a panic**."},
{"lineNum":"  309","line":"///"},
{"lineNum":"  310","line":"/// The philosophy is that these shouldn\'t be dealt with through a"},
{"lineNum":"  311","line":"/// specific return value, as calling code should not have branches to deal with"},
{"lineNum":"  312","line":"/// the case that this code itself is broken."},
{"lineNum":"  313","line":"///"},
{"lineNum":"  314","line":"/// On the other hand, during debug stage, one would want to be informed about"},
{"lineNum":"  315","line":"/// such mistakes, and the default (crashing) may be inadvisable."},
{"lineNum":"  316","line":"/// When this callback is triggered, the API function called is guaranteed not"},
{"lineNum":"  317","line":"/// to cause a crash, though its return value and output arguments are"},
{"lineNum":"  318","line":"/// undefined."},
{"lineNum":"  319","line":"///"},
{"lineNum":"  320","line":"/// See also secp256k1_default_error_callback_fn."},
{"lineNum":"  321","line":"///"},
{"lineNum":"  322","line":"pub unsafe extern \"C\" fn secp256k1_default_illegal_callback_fn(message: *const c_char, _data: *mut c_void) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":"    use core::str;"},
{"lineNum":"  324","line":"    let msg_slice = slice::from_raw_parts(message as *const u8, strlen(message));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"    let msg = str::from_utf8_unchecked(msg_slice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"    panic!(\"[libsecp256k1] illegal argument. {}\", msg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"}"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"#[no_mangle]"},
{"lineNum":"  330","line":"/// **This function is an override for the C function, this is the an edited version of the original description:**"},
{"lineNum":"  331","line":"///"},
{"lineNum":"  332","line":"/// A callback function to be called when an internal consistency check"},
{"lineNum":"  333","line":"/// fails. **This will cause a panic**."},
{"lineNum":"  334","line":"///"},
{"lineNum":"  335","line":"/// This can only trigger in case of a hardware failure, miscompilation,"},
{"lineNum":"  336","line":"/// memory corruption, serious bug in the library, or other error would can"},
{"lineNum":"  337","line":"/// otherwise result in undefined behaviour. It will not trigger due to mere"},
{"lineNum":"  338","line":"/// incorrect usage of the API (see secp256k1_default_illegal_callback_fn"},
{"lineNum":"  339","line":"/// for that). After this callback returns, anything may happen, including"},
{"lineNum":"  340","line":"/// crashing."},
{"lineNum":"  341","line":"///"},
{"lineNum":"  342","line":"/// See also secp256k1_default_illegal_callback_fn."},
{"lineNum":"  343","line":"///"},
{"lineNum":"  344","line":"pub unsafe extern \"C\" fn secp256k1_default_error_callback_fn(message: *const c_char, _data: *mut c_void) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"    use core::str;"},
{"lineNum":"  346","line":"    let msg_slice = slice::from_raw_parts(message as *const u8, strlen(message));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  347","line":"    let msg = str::from_utf8_unchecked(msg_slice);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":"    panic!(\"[libsecp256k1] internal consistency check failed {}\", msg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":"}"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"unsafe fn strlen(mut str_ptr: *const c_char) -> usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":"    let mut ctr = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  354","line":"    while *str_ptr != \'\\0\' as c_char {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  355","line":"        ctr += 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  356","line":"        str_ptr = str_ptr.offset(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"    }"},
{"lineNum":"  358","line":"    ctr","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  359","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"/// A trait for producing pointers that will always be valid in C. (assuming NULL pointer is a valid no-op)"},
{"lineNum":"  363","line":"/// Rust doesn\'t promise what pointers does it give to ZST (https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)"},
{"lineNum":"  364","line":"/// In case the type is empty this trait will give a NULL pointer, which should be handled in C."},
{"lineNum":"  365","line":"///"},
{"lineNum":"  366","line":"pub(crate) trait CPtr {"},
{"lineNum":"  367","line":"    type Target;"},
{"lineNum":"  368","line":"    fn as_c_ptr(&self) -> *const Self::Target;"},
{"lineNum":"  369","line":"    fn as_mut_c_ptr(&mut self) -> *mut Self::Target;"},
{"lineNum":"  370","line":"}"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"impl<T> CPtr for [T] {"},
{"lineNum":"  373","line":"    type Target = T;"},
{"lineNum":"  374","line":"    fn as_c_ptr(&self) -> *const Self::Target {","class":"lineCov","hits":"1","order":"2640","possible_hits":"1",},
{"lineNum":"  375","line":"        if self.is_empty() {","class":"lineCov","hits":"2","order":"2641","possible_hits":"2",},
{"lineNum":"  376","line":"            ptr::null()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"        } else {"},
{"lineNum":"  378","line":"            self.as_ptr()","class":"lineCov","hits":"1","order":"2642","possible_hits":"1",},
{"lineNum":"  379","line":"        }"},
{"lineNum":"  380","line":"    }","class":"linePartCov","hits":"1","order":"2643","possible_hits":"2",},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    fn as_mut_c_ptr(&mut self) -> *mut Self::Target {","class":"lineCov","hits":"1","order":"2931","possible_hits":"1",},
{"lineNum":"  383","line":"        if self.is_empty() {","class":"linePartCov","hits":"1","order":"2932","possible_hits":"2",},
{"lineNum":"  384","line":"            ptr::null::<Self::Target>() as *mut _","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"        } else {"},
{"lineNum":"  386","line":"            self.as_mut_ptr()","class":"lineCov","hits":"1","order":"2933","possible_hits":"1",},
{"lineNum":"  387","line":"        }"},
{"lineNum":"  388","line":"    }","class":"linePartCov","hits":"1","order":"2934","possible_hits":"2",},
{"lineNum":"  389","line":"}"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"#[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"  395","line":"mod fuzz_dummy {"},
{"lineNum":"  396","line":"    extern crate std;"},
{"lineNum":"  397","line":"    use types::*;"},
{"lineNum":"  398","line":"    use ffi::*;"},
{"lineNum":"  399","line":"    use self::std::{ptr, mem};"},
{"lineNum":"  400","line":"    use self::std::boxed::Box;"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    extern \"C\" {"},
{"lineNum":"  403","line":"        pub static secp256k1_ecdh_hash_function_default: EcdhHashFn;"},
{"lineNum":"  404","line":"        pub static secp256k1_nonce_function_rfc6979: NonceFn;"},
{"lineNum":"  405","line":"        pub static secp256k1_context_no_precomp: *const Context;"},
{"lineNum":"  406","line":"    }"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    // Contexts"},
{"lineNum":"  409","line":"    /// Creates a dummy context, tracking flags to ensure proper calling semantics"},
{"lineNum":"  410","line":"    pub unsafe fn secp256k1_context_preallocated_create(_ptr: *mut c_void, flags: c_uint) -> *mut Context {"},
{"lineNum":"  411","line":"        let b = Box::new(Context(flags as i32));"},
{"lineNum":"  412","line":"        Box::into_raw(b)"},
{"lineNum":"  413","line":"    }"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"    /// Return dummy size of context struct."},
{"lineNum":"  416","line":"    pub unsafe fn secp256k1_context_preallocated_size(_flags: c_uint) -> usize {"},
{"lineNum":"  417","line":"        mem::size_of::<Context>()"},
{"lineNum":"  418","line":"    }"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    /// Return dummy size of context struct."},
{"lineNum":"  421","line":"    pub unsafe fn secp256k1_context_preallocated_clone_size(cx: *mut Context) -> usize {"},
{"lineNum":"  422","line":"        mem::size_of::<Context>()"},
{"lineNum":"  423","line":"    }"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    /// Copies a dummy context"},
{"lineNum":"  426","line":"    pub unsafe fn secp256k1_context_preallocated_clone(cx: *const Context, prealloc: *mut c_void) -> *mut Context {"},
{"lineNum":"  427","line":"        let ret = prealloc as *mut Context;"},
{"lineNum":"  428","line":"        *ret = (*cx).clone();"},
{"lineNum":"  429","line":"        ret"},
{"lineNum":"  430","line":"    }"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"    /// \"Destroys\" a dummy context"},
{"lineNum":"  433","line":"    pub unsafe fn secp256k1_context_preallocated_destroy(cx: *mut Context) {"},
{"lineNum":"  434","line":"        (*cx).0 = 0;"},
{"lineNum":"  435","line":"    }"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"    /// Asserts that cx is properly initialized"},
{"lineNum":"  438","line":"    pub unsafe fn secp256k1_context_randomize(cx: *mut Context,"},
{"lineNum":"  439","line":"                                              _seed32: *const c_uchar)"},
{"lineNum":"  440","line":"                                              -> c_int {"},
{"lineNum":"  441","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  442","line":"        1"},
{"lineNum":"  443","line":"    }"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"    // TODO secp256k1_context_set_illegal_callback"},
{"lineNum":"  446","line":"    // TODO secp256k1_context_set_error_callback"},
{"lineNum":"  447","line":"    // (Actually, I don\'t really want these exposed; if either of these"},
{"lineNum":"  448","line":"    // are ever triggered it indicates a bug in rust-secp256k1, since"},
{"lineNum":"  449","line":"    // one goal is to use Rust\'s type system to eliminate all possible"},
{"lineNum":"  450","line":"    // bad inputs.)"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"    // Pubkeys"},
{"lineNum":"  453","line":"    /// Parse 33/65 byte pubkey into PublicKey, losing compressed information"},
{"lineNum":"  454","line":"    pub unsafe fn secp256k1_ec_pubkey_parse(cx: *const Context, pk: *mut PublicKey,"},
{"lineNum":"  455","line":"                                            input: *const c_uchar, in_len: usize)"},
{"lineNum":"  456","line":"                                            -> c_int {"},
{"lineNum":"  457","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  458","line":"        match in_len {"},
{"lineNum":"  459","line":"            33 => {"},
{"lineNum":"  460","line":"                if (*input.offset(1) > 0x7f && *input != 2) || (*input.offset(1) <= 0x7f && *input != 3) {"},
{"lineNum":"  461","line":"                    0"},
{"lineNum":"  462","line":"                } else {"},
{"lineNum":"  463","line":"                    ptr::copy(input.offset(1), (*pk).0[0..32].as_mut_ptr(), 32);"},
{"lineNum":"  464","line":"                    ptr::copy(input.offset(1), (*pk).0[32..64].as_mut_ptr(), 32);"},
{"lineNum":"  465","line":"                    test_pk_validate(cx, pk)"},
{"lineNum":"  466","line":"                }"},
{"lineNum":"  467","line":"            },"},
{"lineNum":"  468","line":"            65 => {"},
{"lineNum":"  469","line":"                if *input != 4 && *input != 6 && *input != 7 {"},
{"lineNum":"  470","line":"                    0"},
{"lineNum":"  471","line":"                } else {"},
{"lineNum":"  472","line":"                    ptr::copy(input.offset(1), (*pk).0.as_mut_ptr(), 64);"},
{"lineNum":"  473","line":"                    test_pk_validate(cx, pk)"},
{"lineNum":"  474","line":"                }"},
{"lineNum":"  475","line":"            },"},
{"lineNum":"  476","line":"            _ => 0"},
{"lineNum":"  477","line":"        }"},
{"lineNum":"  478","line":"    }"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"    /// Serialize PublicKey back to 33/65 byte pubkey"},
{"lineNum":"  481","line":"    pub unsafe fn secp256k1_ec_pubkey_serialize(cx: *const Context, output: *mut c_uchar,"},
{"lineNum":"  482","line":"                                                out_len: *mut usize, pk: *const PublicKey,"},
{"lineNum":"  483","line":"                                                compressed: c_uint)"},
{"lineNum":"  484","line":"                                                -> c_int {"},
{"lineNum":"  485","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  486","line":"        if test_pk_validate(cx, pk) != 1 { return 0; }"},
{"lineNum":"  487","line":"        if compressed == SECP256K1_SER_COMPRESSED {"},
{"lineNum":"  488","line":"            assert_eq!(*out_len, 33);"},
{"lineNum":"  489","line":"            if (*pk).0[0] > 0x7f {"},
{"lineNum":"  490","line":"                *output = 2;"},
{"lineNum":"  491","line":"            } else {"},
{"lineNum":"  492","line":"                *output = 3;"},
{"lineNum":"  493","line":"            }"},
{"lineNum":"  494","line":"            ptr::copy((*pk).0.as_ptr(), output.offset(1), 32);"},
{"lineNum":"  495","line":"        } else if compressed == SECP256K1_SER_UNCOMPRESSED {"},
{"lineNum":"  496","line":"            assert_eq!(*out_len, 65);"},
{"lineNum":"  497","line":"            *output = 4;"},
{"lineNum":"  498","line":"            ptr::copy((*pk).0.as_ptr(), output.offset(1), 64);"},
{"lineNum":"  499","line":"        } else {"},
{"lineNum":"  500","line":"            panic!(\"Bad flags\");"},
{"lineNum":"  501","line":"        }"},
{"lineNum":"  502","line":"        1"},
{"lineNum":"  503","line":"     }"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    // Signatures"},
{"lineNum":"  506","line":"    pub unsafe fn secp256k1_ecdsa_signature_parse_der(_cx: *const Context, _sig: *mut Signature,"},
{"lineNum":"  507","line":"                                                      _input: *const c_uchar, _in_len: usize)"},
{"lineNum":"  508","line":"                                                      -> c_int {"},
{"lineNum":"  509","line":"        unimplemented!();"},
{"lineNum":"  510","line":"    }"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"    /// Copies input64 to sig, checking the pubkey part is valid"},
{"lineNum":"  513","line":"    pub unsafe fn secp256k1_ecdsa_signature_parse_compact(cx: *const Context, sig: *mut Signature,"},
{"lineNum":"  514","line":"                                                          input64: *const c_uchar)"},
{"lineNum":"  515","line":"                                                          -> c_int {"},
{"lineNum":"  516","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  517","line":"        if secp256k1_ec_seckey_verify(cx, input64.offset(32)) != 1 { return 0; } // sig should be msg32||sk"},
{"lineNum":"  518","line":"        ptr::copy(input64, (*sig).0[..].as_mut_ptr(), 64);"},
{"lineNum":"  519","line":"        1"},
{"lineNum":"  520","line":"    }"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"    pub unsafe fn ecdsa_signature_parse_der_lax(_cx: *const Context, _sig: *mut Signature,"},
{"lineNum":"  523","line":"                                                _input: *const c_uchar, _in_len: usize)"},
{"lineNum":"  524","line":"                                                -> c_int {"},
{"lineNum":"  525","line":"        unimplemented!();"},
{"lineNum":"  526","line":"    }"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"    /// Copies up to 72 bytes into output from sig"},
{"lineNum":"  529","line":"    pub unsafe fn secp256k1_ecdsa_signature_serialize_der(cx: *const Context, output: *mut c_uchar,"},
{"lineNum":"  530","line":"                                                          out_len: *mut usize, sig: *const Signature)"},
{"lineNum":"  531","line":"                                                          -> c_int {"},
{"lineNum":"  532","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"        let mut len_r = 33;"},
{"lineNum":"  535","line":"        if *(*sig).0.as_ptr().offset(0) < 0x80 {"},
{"lineNum":"  536","line":"            len_r -= 1;"},
{"lineNum":"  537","line":"        }"},
{"lineNum":"  538","line":"        let mut len_s = 33;"},
{"lineNum":"  539","line":"        if *(*sig).0.as_ptr().offset(32) < 0x80 {"},
{"lineNum":"  540","line":"            len_s -= 1;"},
{"lineNum":"  541","line":"        }"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"        assert!(*out_len >= (6 + len_s + len_r) as usize);"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"        *output.offset(0) = 0x30;"},
{"lineNum":"  546","line":"        *output.offset(1) = 4 + len_r + len_s;"},
{"lineNum":"  547","line":"        *output.offset(2) = 0x02;"},
{"lineNum":"  548","line":"        *output.offset(3) = len_r;"},
{"lineNum":"  549","line":"        if len_r == 33 {"},
{"lineNum":"  550","line":"            *output.offset(4) = 0;"},
{"lineNum":"  551","line":"            ptr::copy((*sig).0[..].as_ptr(), output.offset(5), 32);"},
{"lineNum":"  552","line":"        } else {"},
{"lineNum":"  553","line":"            ptr::copy((*sig).0[..].as_ptr(), output.offset(4), 32);"},
{"lineNum":"  554","line":"        }"},
{"lineNum":"  555","line":"        *output.offset(4 + len_r as isize) = 0x02;"},
{"lineNum":"  556","line":"        *output.offset(5 + len_r as isize) = len_s;"},
{"lineNum":"  557","line":"        if len_s == 33 {"},
{"lineNum":"  558","line":"            *output.offset(6 + len_r as isize) = 0;"},
{"lineNum":"  559","line":"            ptr::copy((*sig).0[..].as_ptr().offset(32), output.offset(7 + len_r as isize), 32);"},
{"lineNum":"  560","line":"        } else {"},
{"lineNum":"  561","line":"            ptr::copy((*sig).0[..].as_ptr().offset(32), output.offset(6 + len_r as isize), 32);"},
{"lineNum":"  562","line":"        }"},
{"lineNum":"  563","line":"        1"},
{"lineNum":"  564","line":"    }"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"    /// Copies sig to output64"},
{"lineNum":"  567","line":"    pub unsafe fn secp256k1_ecdsa_signature_serialize_compact(cx: *const Context, output64: *mut c_uchar,"},
{"lineNum":"  568","line":"                                                              sig: *const Signature)"},
{"lineNum":"  569","line":"                                                              -> c_int {"},
{"lineNum":"  570","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  571","line":"        ptr::copy((*sig).0[..].as_ptr(), output64, 64);"},
{"lineNum":"  572","line":"        1"},
{"lineNum":"  573","line":"    }"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"    pub unsafe fn secp256k1_ecdsa_signature_normalize(_cx: *const Context, _out_sig: *mut Signature,"},
{"lineNum":"  576","line":"                                                      _in_sig: *const Signature)"},
{"lineNum":"  577","line":"                                                      -> c_int {"},
{"lineNum":"  578","line":"        unimplemented!();"},
{"lineNum":"  579","line":"    }"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    // ECDSA"},
{"lineNum":"  582","line":"    /// Verifies that sig is msg32||pk[0..32]"},
{"lineNum":"  583","line":"    pub unsafe fn secp256k1_ecdsa_verify(cx: *const Context,"},
{"lineNum":"  584","line":"                                         sig: *const Signature,"},
{"lineNum":"  585","line":"                                         msg32: *const c_uchar,"},
{"lineNum":"  586","line":"                                         pk: *const PublicKey)"},
{"lineNum":"  587","line":"                                         -> c_int {"},
{"lineNum":"  588","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  589","line":"        assert!((*cx).0 as u32 & SECP256K1_START_VERIFY == SECP256K1_START_VERIFY);"},
{"lineNum":"  590","line":"        if test_pk_validate(cx, pk) != 1 { return 0; }"},
{"lineNum":"  591","line":"        for i in 0..32 {"},
{"lineNum":"  592","line":"            if (*sig).0[i] != *msg32.offset(i as isize) {"},
{"lineNum":"  593","line":"                return 0;"},
{"lineNum":"  594","line":"            }"},
{"lineNum":"  595","line":"        }"},
{"lineNum":"  596","line":"        if (*sig).0[32..64] != (*pk).0[0..32] {"},
{"lineNum":"  597","line":"            0"},
{"lineNum":"  598","line":"        } else {"},
{"lineNum":"  599","line":"            1"},
{"lineNum":"  600","line":"        }"},
{"lineNum":"  601","line":"    }"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"    /// Sets sig to msg32||sk"},
{"lineNum":"  604","line":"    pub unsafe fn secp256k1_ecdsa_sign(cx: *const Context,"},
{"lineNum":"  605","line":"                                       sig: *mut Signature,"},
{"lineNum":"  606","line":"                                       msg32: *const c_uchar,"},
{"lineNum":"  607","line":"                                       sk: *const c_uchar,"},
{"lineNum":"  608","line":"                                       _noncefn: NonceFn,"},
{"lineNum":"  609","line":"                                       _noncedata: *const c_void)"},
{"lineNum":"  610","line":"                                       -> c_int {"},
{"lineNum":"  611","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  612","line":"        assert!((*cx).0 as u32 & SECP256K1_START_SIGN == SECP256K1_START_SIGN);"},
{"lineNum":"  613","line":"        if secp256k1_ec_seckey_verify(cx, sk) != 1 { return 0; }"},
{"lineNum":"  614","line":"        ptr::copy(msg32, (*sig).0[0..32].as_mut_ptr(), 32);"},
{"lineNum":"  615","line":"        ptr::copy(sk, (*sig).0[32..64].as_mut_ptr(), 32);"},
{"lineNum":"  616","line":"        1"},
{"lineNum":"  617","line":"    }"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"    // EC"},
{"lineNum":"  620","line":"    /// Checks that pk != 0xffff...ffff and pk[0..32] == pk[32..64]"},
{"lineNum":"  621","line":"    pub unsafe fn test_pk_validate(cx: *const Context,"},
{"lineNum":"  622","line":"                                   pk: *const PublicKey) -> c_int {"},
{"lineNum":"  623","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  624","line":"        if (*pk).0[0..32] != (*pk).0[32..64] || secp256k1_ec_seckey_verify(cx, (*pk).0[0..32].as_ptr()) == 0 {"},
{"lineNum":"  625","line":"            0"},
{"lineNum":"  626","line":"        } else {"},
{"lineNum":"  627","line":"            1"},
{"lineNum":"  628","line":"        }"},
{"lineNum":"  629","line":"    }"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"    /// Checks that sk != 0xffff...ffff"},
{"lineNum":"  632","line":"    pub unsafe fn secp256k1_ec_seckey_verify(cx: *const Context,"},
{"lineNum":"  633","line":"                                             sk: *const c_uchar) -> c_int {"},
{"lineNum":"  634","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  635","line":"        let mut res = 0;"},
{"lineNum":"  636","line":"        for i in 0..32 {"},
{"lineNum":"  637","line":"            if *sk.offset(i as isize) != 0xff { res = 1 };"},
{"lineNum":"  638","line":"        }"},
{"lineNum":"  639","line":"        res"},
{"lineNum":"  640","line":"    }"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"    /// Sets pk to sk||sk"},
{"lineNum":"  643","line":"    pub unsafe fn secp256k1_ec_pubkey_create(cx: *const Context, pk: *mut PublicKey,"},
{"lineNum":"  644","line":"                                             sk: *const c_uchar) -> c_int {"},
{"lineNum":"  645","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  646","line":"        if secp256k1_ec_seckey_verify(cx, sk) != 1 { return 0; }"},
{"lineNum":"  647","line":"        ptr::copy(sk, (*pk).0[0..32].as_mut_ptr(), 32);"},
{"lineNum":"  648","line":"        ptr::copy(sk, (*pk).0[32..64].as_mut_ptr(), 32);"},
{"lineNum":"  649","line":"        1"},
{"lineNum":"  650","line":"    }"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"//TODO secp256k1_ec_privkey_export"},
{"lineNum":"  653","line":"//TODO secp256k1_ec_privkey_import"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    /// Copies the first 16 bytes of tweak into the last 16 bytes of sk"},
{"lineNum":"  656","line":"    pub unsafe fn secp256k1_ec_privkey_tweak_add(cx: *const Context,"},
{"lineNum":"  657","line":"                                                 sk: *mut c_uchar,"},
{"lineNum":"  658","line":"                                                 tweak: *const c_uchar)"},
{"lineNum":"  659","line":"                                                 -> c_int {"},
{"lineNum":"  660","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  661","line":"        if secp256k1_ec_seckey_verify(cx, sk) != 1 { return 0; }"},
{"lineNum":"  662","line":"        ptr::copy(tweak.offset(16), sk.offset(16), 16);"},
{"lineNum":"  663","line":"        *sk.offset(24) = 0x7f; // Ensure sk remains valid no matter what tweak was"},
{"lineNum":"  664","line":"        1"},
{"lineNum":"  665","line":"    }"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"    /// The PublicKey equivalent of secp256k1_ec_privkey_tweak_add"},
{"lineNum":"  668","line":"    pub unsafe fn secp256k1_ec_pubkey_tweak_add(cx: *const Context,"},
{"lineNum":"  669","line":"                                                pk: *mut PublicKey,"},
{"lineNum":"  670","line":"                                                tweak: *const c_uchar)"},
{"lineNum":"  671","line":"                                                -> c_int {"},
{"lineNum":"  672","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  673","line":"        if test_pk_validate(cx, pk) != 1 { return 0; }"},
{"lineNum":"  674","line":"        ptr::copy(tweak.offset(16), (*pk).0[16..32].as_mut_ptr(), 16);"},
{"lineNum":"  675","line":"        ptr::copy(tweak.offset(16), (*pk).0[16+32..64].as_mut_ptr(), 16);"},
{"lineNum":"  676","line":"        (*pk).0[24] = 0x7f; // Ensure pk remains valid no matter what tweak was"},
{"lineNum":"  677","line":"        (*pk).0[24+32] = 0x7f; // Ensure pk remains valid no matter what tweak was"},
{"lineNum":"  678","line":"        1"},
{"lineNum":"  679","line":"    }"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"    /// Copies the last 16 bytes of tweak into the last 16 bytes of sk"},
{"lineNum":"  682","line":"    pub unsafe fn secp256k1_ec_privkey_tweak_mul(cx: *const Context,"},
{"lineNum":"  683","line":"                                                 sk: *mut c_uchar,"},
{"lineNum":"  684","line":"                                                 tweak: *const c_uchar)"},
{"lineNum":"  685","line":"                                                 -> c_int {"},
{"lineNum":"  686","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  687","line":"        if secp256k1_ec_seckey_verify(cx, sk) != 1 { return 0; }"},
{"lineNum":"  688","line":"        ptr::copy(tweak.offset(16), sk.offset(16), 16);"},
{"lineNum":"  689","line":"        *sk.offset(24) = 0x00; // Ensure sk remains valid no matter what tweak was"},
{"lineNum":"  690","line":"        1"},
{"lineNum":"  691","line":"    }"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"    /// The PublicKey equivalent of secp256k1_ec_privkey_tweak_mul"},
{"lineNum":"  694","line":"    pub unsafe fn secp256k1_ec_pubkey_tweak_mul(cx: *const Context,"},
{"lineNum":"  695","line":"                                                pk: *mut PublicKey,"},
{"lineNum":"  696","line":"                                                tweak: *const c_uchar)"},
{"lineNum":"  697","line":"                                                -> c_int {"},
{"lineNum":"  698","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  699","line":"        if test_pk_validate(cx, pk) != 1 { return 0; }"},
{"lineNum":"  700","line":"        ptr::copy(tweak.offset(16), (*pk).0[16..32].as_mut_ptr(), 16);"},
{"lineNum":"  701","line":"        ptr::copy(tweak.offset(16), (*pk).0[16+32..64].as_mut_ptr(), 16);"},
{"lineNum":"  702","line":"        (*pk).0[24] = 0x00; // Ensure pk remains valid no matter what tweak was"},
{"lineNum":"  703","line":"        (*pk).0[24+32] = 0x00; // Ensure pk remains valid no matter what tweak was"},
{"lineNum":"  704","line":"        1"},
{"lineNum":"  705","line":"    }"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    pub unsafe fn secp256k1_ec_pubkey_combine(cx: *const Context,"},
{"lineNum":"  708","line":"                                              out: *mut PublicKey,"},
{"lineNum":"  709","line":"                                              ins: *const *const PublicKey,"},
{"lineNum":"  710","line":"                                              n: c_int)"},
{"lineNum":"  711","line":"                                              -> c_int {"},
{"lineNum":"  712","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  713","line":"        assert!(n <= 32 && n >= 0); //TODO: Remove this restriction?"},
{"lineNum":"  714","line":"        for i in 0..n {"},
{"lineNum":"  715","line":"            if test_pk_validate(cx, *ins.offset(i as isize)) != 1 { return 0; }"},
{"lineNum":"  716","line":"            (*out).0[(i*32/n) as usize..((i+1)*32/n) as usize].copy_from_slice(&(**ins.offset(i as isize)).0[(i*32/n) as usize..((i+1)*32/n) as usize]);"},
{"lineNum":"  717","line":"        }"},
{"lineNum":"  718","line":"        ptr::copy((*out).0[0..32].as_ptr(), (*out).0[32..64].as_mut_ptr(), 32);"},
{"lineNum":"  719","line":"        (*out).0[24] = 0x7f; // pk should always be valid"},
{"lineNum":"  720","line":"        (*out).0[24+32] = 0x7f; // pk should always be valid"},
{"lineNum":"  721","line":"        test_pk_validate(cx, out)"},
{"lineNum":"  722","line":"    }"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"    /// Sets out to point[0..16]||scalar[0..16]"},
{"lineNum":"  725","line":"    pub unsafe fn secp256k1_ecdh("},
{"lineNum":"  726","line":"        cx: *const Context,"},
{"lineNum":"  727","line":"        out: *mut SharedSecret,"},
{"lineNum":"  728","line":"        point: *const PublicKey,"},
{"lineNum":"  729","line":"        scalar: *const c_uchar,"},
{"lineNum":"  730","line":"        _hashfp: EcdhHashFn,"},
{"lineNum":"  731","line":"        _data: *mut c_void,"},
{"lineNum":"  732","line":"    ) -> c_int {"},
{"lineNum":"  733","line":"        assert!(!cx.is_null() && (*cx).0 as u32 & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  734","line":"        if secp256k1_ec_seckey_verify(cx, scalar) != 1 { return 0; }"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"        let mut scalar_prefix = [0; 16];"},
{"lineNum":"  737","line":"        ptr::copy(scalar, scalar_prefix[..].as_mut_ptr(), 16);"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"        if (*point).0[0..16] > scalar_prefix[0..16] {"},
{"lineNum":"  740","line":"            (*out).0[0..16].copy_from_slice(&(*point).0[0..16]);"},
{"lineNum":"  741","line":"            ptr::copy(scalar, (*out).0[16..32].as_mut_ptr(), 16);"},
{"lineNum":"  742","line":"        } else {"},
{"lineNum":"  743","line":"            ptr::copy(scalar, (*out).0[0..16].as_mut_ptr(), 16);"},
{"lineNum":"  744","line":"            (*out).0[16..32].copy_from_slice(&(*point).0[0..16]);"},
{"lineNum":"  745","line":"        }"},
{"lineNum":"  746","line":"        (*out).0[16] = 0x00; // result should always be a valid secret key"},
{"lineNum":"  747","line":"        1"},
{"lineNum":"  748","line":"    }"},
{"lineNum":"  749","line":"}"},
{"lineNum":"  750","line":"#[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"  751","line":"pub use self::fuzz_dummy::*;"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"#[cfg(test)]"},
{"lineNum":"  755","line":"mod tests {"},
{"lineNum":"  756","line":"    use std::ffi::CString;"},
{"lineNum":"  757","line":"    use super::strlen;"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"    #[test]"},
{"lineNum":"  760","line":"    fn test_strlen() {"},
{"lineNum":"  761","line":"        let orig = \"test strlen \\t \\n\";"},
{"lineNum":"  762","line":"        let test = CString::new(orig).unwrap();"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"        assert_eq!(orig.len(), unsafe {strlen(test.as_ptr())});"},
{"lineNum":"  765","line":"    }"},
{"lineNum":"  766","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "ser_de-82e03ad9d566398b", "date" : "2020-05-23 13:12:49", "instrumented" : 27, "covered" : 10,};
var merged_data = [];
