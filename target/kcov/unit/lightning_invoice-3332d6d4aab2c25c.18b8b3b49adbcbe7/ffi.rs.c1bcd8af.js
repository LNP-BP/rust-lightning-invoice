var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin secp256k1 bindings"},
{"lineNum":"    2","line":"// Written in 2014 by"},
{"lineNum":"    3","line":"//   Dawid Ciężarkiewicz"},
{"lineNum":"    4","line":"//   Andrew Poelstra"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    7","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    8","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    9","line":"// any warranty."},
{"lineNum":"   10","line":"//"},
{"lineNum":"   11","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   12","line":"// along with this software."},
{"lineNum":"   13","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"//! # FFI of the recovery module"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"use core::mem;"},
{"lineNum":"   19","line":"use types::*;"},
{"lineNum":"   20","line":"use ffi::{Context, NonceFn, PublicKey, Signature, CPtr};"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/// Library-internal representation of a Secp256k1 signature + recovery ID"},
{"lineNum":"   23","line":"#[repr(C)]"},
{"lineNum":"   24","line":"pub struct RecoverableSignature([c_uchar; 65]);"},
{"lineNum":"   25","line":"impl_array_newtype!(RecoverableSignature, c_uchar, 65);"},
{"lineNum":"   26","line":"impl_raw_debug!(RecoverableSignature);"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"impl RecoverableSignature {"},
{"lineNum":"   29","line":"    /// Create a new (zeroed) signature usable for the FFI interface"},
{"lineNum":"   30","line":"    pub fn new() -> RecoverableSignature { RecoverableSignature([0; 65]) }","class":"lineCov","hits":"2","order":"3778","possible_hits":"2",},
{"lineNum":"   31","line":"    /// Create a new (uninitialized) signature usable for the FFI interface"},
{"lineNum":"   32","line":"    #[deprecated(since = \"0.15.3\", note = \"Please use the new function instead\")]"},
{"lineNum":"   33","line":"    pub unsafe fn blank() -> RecoverableSignature { RecoverableSignature::new() }"},
{"lineNum":"   34","line":"}"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"impl Default for RecoverableSignature {"},
{"lineNum":"   37","line":"    fn default() -> Self {"},
{"lineNum":"   38","line":"        RecoverableSignature::new()"},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"#[cfg(not(feature = \"fuzztarget\"))]"},
{"lineNum":"   43","line":"extern \"C\" {"},
{"lineNum":"   44","line":"    pub fn secp256k1_ecdsa_recoverable_signature_parse_compact(cx: *const Context, sig: *mut RecoverableSignature,"},
{"lineNum":"   45","line":"                                                               input64: *const c_uchar, recid: c_int)"},
{"lineNum":"   46","line":"                                                               -> c_int;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    pub fn secp256k1_ecdsa_recoverable_signature_serialize_compact(cx: *const Context, output64: *const c_uchar,"},
{"lineNum":"   49","line":"                                                                   recid: *mut c_int, sig: *const RecoverableSignature)"},
{"lineNum":"   50","line":"                                                                   -> c_int;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    pub fn secp256k1_ecdsa_recoverable_signature_convert(cx: *const Context, sig: *mut Signature,"},
{"lineNum":"   53","line":"                                                         input: *const RecoverableSignature)"},
{"lineNum":"   54","line":"                                                         -> c_int;"},
{"lineNum":"   55","line":"    pub fn secp256k1_ecdsa_sign_recoverable(cx: *const Context,"},
{"lineNum":"   56","line":"                                            sig: *mut RecoverableSignature,"},
{"lineNum":"   57","line":"                                            msg32: *const c_uchar,"},
{"lineNum":"   58","line":"                                            sk: *const c_uchar,"},
{"lineNum":"   59","line":"                                            noncefn: NonceFn,"},
{"lineNum":"   60","line":"                                            noncedata: *const c_void)"},
{"lineNum":"   61","line":"                                            -> c_int;"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    pub fn secp256k1_ecdsa_recover(cx: *const Context,"},
{"lineNum":"   64","line":"                                   pk: *mut PublicKey,"},
{"lineNum":"   65","line":"                                   sig: *const RecoverableSignature,"},
{"lineNum":"   66","line":"                                   msg32: *const c_uchar)"},
{"lineNum":"   67","line":"                                   -> c_int;"},
{"lineNum":"   68","line":"}"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"#[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"   72","line":"mod fuzz_dummy {"},
{"lineNum":"   73","line":"    extern crate std;"},
{"lineNum":"   74","line":"    use types::*;"},
{"lineNum":"   75","line":"    use ffi::*;"},
{"lineNum":"   76","line":"    use self::std::ptr;"},
{"lineNum":"   77","line":"    use super::RecoverableSignature;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    pub unsafe fn secp256k1_ecdsa_recoverable_signature_parse_compact(_cx: *const Context, _sig: *mut RecoverableSignature,"},
{"lineNum":"   80","line":"                                                                      _input64: *const c_uchar, _recid: c_int)"},
{"lineNum":"   81","line":"                                                                      -> c_int {"},
{"lineNum":"   82","line":"        unimplemented!();"},
{"lineNum":"   83","line":"    }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    pub unsafe fn secp256k1_ecdsa_recoverable_signature_serialize_compact(_cx: *const Context, _output64: *const c_uchar,"},
{"lineNum":"   86","line":"                                                                          _recid: *mut c_int, _sig: *const RecoverableSignature)"},
{"lineNum":"   87","line":"                                                                          -> c_int {"},
{"lineNum":"   88","line":"        unimplemented!();"},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    pub unsafe fn secp256k1_ecdsa_recoverable_signature_convert(_cx: *const Context, _sig: *mut Signature,"},
{"lineNum":"   92","line":"                                                                _input: *const RecoverableSignature)"},
{"lineNum":"   93","line":"                                                                -> c_int {"},
{"lineNum":"   94","line":"        unimplemented!();"},
{"lineNum":"   95","line":"    }"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    /// Sets sig to (2|3)||msg32||sk"},
{"lineNum":"   98","line":"    pub unsafe fn secp256k1_ecdsa_sign_recoverable(cx: *const Context,"},
{"lineNum":"   99","line":"                                                   sig: *mut RecoverableSignature,"},
{"lineNum":"  100","line":"                                                   msg32: *const c_uchar,"},
{"lineNum":"  101","line":"                                                   sk: *const c_uchar,"},
{"lineNum":"  102","line":"                                                   _noncefn: NonceFn,"},
{"lineNum":"  103","line":"                                                   _noncedata: *const c_void)"},
{"lineNum":"  104","line":"                                                   -> c_int {"},
{"lineNum":"  105","line":"        assert!(!cx.is_null() && (*cx).flags() & !(SECP256K1_START_NONE | SECP256K1_START_VERIFY | SECP256K1_START_SIGN) == 0);"},
{"lineNum":"  106","line":"        assert!((*cx).flags() & SECP256K1_START_SIGN == SECP256K1_START_SIGN);"},
{"lineNum":"  107","line":"        if secp256k1_ec_seckey_verify(cx, sk) != 1 { return 0; }"},
{"lineNum":"  108","line":"        if *sk.offset(0) > 0x7f {"},
{"lineNum":"  109","line":"            (*sig).0[0] = 2;"},
{"lineNum":"  110","line":"        } else {"},
{"lineNum":"  111","line":"            (*sig).0[0] = 3;"},
{"lineNum":"  112","line":"        }"},
{"lineNum":"  113","line":"        ptr::copy(msg32, (*sig).0[1..33].as_mut_ptr(), 32);"},
{"lineNum":"  114","line":"        ptr::copy(sk, (*sig).0[33..65].as_mut_ptr(), 32);"},
{"lineNum":"  115","line":"        1"},
{"lineNum":"  116","line":"    }"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    pub unsafe fn secp256k1_ecdsa_recover(_cx: *const Context,"},
{"lineNum":"  119","line":"                                          _pk: *mut PublicKey,"},
{"lineNum":"  120","line":"                                          _sig: *const RecoverableSignature,"},
{"lineNum":"  121","line":"                                          _msg32: *const c_uchar)"},
{"lineNum":"  122","line":"                                          -> c_int {"},
{"lineNum":"  123","line":"        unimplemented!();"},
{"lineNum":"  124","line":"    }"},
{"lineNum":"  125","line":"}"},
{"lineNum":"  126","line":"#[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"  127","line":"pub use self::fuzz_dummy::*;"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-3332d6d4aab2c25c", "date" : "2020-05-23 13:12:48", "instrumented" : 1, "covered" : 1,};
var merged_data = [];
