var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin secp256k1 bindings"},
{"lineNum":"    2","line":"// Written in 2014 by"},
{"lineNum":"    3","line":"//   Dawid Ciężarkiewicz"},
{"lineNum":"    4","line":"//   Andrew Poelstra"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    7","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    8","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    9","line":"// any warranty."},
{"lineNum":"   10","line":"//"},
{"lineNum":"   11","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   12","line":"// along with this software."},
{"lineNum":"   13","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// This is a macro that routinely comes in handy"},
{"lineNum":"   17","line":"macro_rules! impl_array_newtype {"},
{"lineNum":"   18","line":"    ($thing:ident, $ty:ty, $len:expr) => {"},
{"lineNum":"   19","line":"        impl Copy for $thing {}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"        impl $thing {"},
{"lineNum":"   22","line":"            #[inline]"},
{"lineNum":"   23","line":"            /// Converts the object to a raw pointer for FFI interfacing"},
{"lineNum":"   24","line":"            pub fn as_ptr(&self) -> *const $ty {","class":"lineCov","hits":"2","order":"5112","possible_hits":"2",},
{"lineNum":"   25","line":"                let &$thing(ref dat) = self;","class":"lineCov","hits":"2","order":"5113","possible_hits":"2",},
{"lineNum":"   26","line":"                dat.as_ptr()","class":"lineCov","hits":"2","order":"5114","possible_hits":"2",},
{"lineNum":"   27","line":"            }","class":"linePartCov","hits":"2","order":"5115","possible_hits":"4",},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"            #[inline]"},
{"lineNum":"   30","line":"            /// Converts the object to a mutable raw pointer for FFI interfacing"},
{"lineNum":"   31","line":"            pub fn as_mut_ptr(&mut self) -> *mut $ty {"},
{"lineNum":"   32","line":"                let &mut $thing(ref mut dat) = self;"},
{"lineNum":"   33","line":"                dat.as_mut_ptr()"},
{"lineNum":"   34","line":"            }"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"            #[inline]"},
{"lineNum":"   37","line":"            /// Returns the length of the object as an array"},
{"lineNum":"   38","line":"            pub fn len(&self) -> usize { $len }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"            #[inline]"},
{"lineNum":"   41","line":"            /// Returns whether the object as an array is empty"},
{"lineNum":"   42","line":"            pub fn is_empty(&self) -> bool { false }","class":"linePartCov","hits":"4","order":"5110","possible_hits":"6",},
{"lineNum":"   43","line":"        }"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        impl PartialEq for $thing {"},
{"lineNum":"   46","line":"            #[inline]"},
{"lineNum":"   47","line":"            fn eq(&self, other: &$thing) -> bool {","class":"lineCov","hits":"2","order":"2747","possible_hits":"2",},
{"lineNum":"   48","line":"                &self[..] == &other[..]","class":"lineCov","hits":"2","order":"2748","possible_hits":"2",},
{"lineNum":"   49","line":"            }","class":"linePartCov","hits":"2","order":"2753","possible_hits":"4",},
{"lineNum":"   50","line":"        }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        impl Eq for $thing {}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"        impl PartialOrd for $thing {"},
{"lineNum":"   55","line":"            #[inline]"},
{"lineNum":"   56","line":"            fn partial_cmp(&self, other: &$thing) -> Option<::core::cmp::Ordering> {"},
{"lineNum":"   57","line":"                self[..].partial_cmp(&other[..])"},
{"lineNum":"   58","line":"            }"},
{"lineNum":"   59","line":"        }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        impl Ord for $thing {"},
{"lineNum":"   62","line":"            #[inline]"},
{"lineNum":"   63","line":"            fn cmp(&self, other: &$thing) -> ::core::cmp::Ordering {"},
{"lineNum":"   64","line":"                self[..].cmp(&other[..])"},
{"lineNum":"   65","line":"            }"},
{"lineNum":"   66","line":"        }"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        impl Clone for $thing {"},
{"lineNum":"   69","line":"            #[inline]"},
{"lineNum":"   70","line":"            fn clone(&self) -> $thing {"},
{"lineNum":"   71","line":"                let &$thing(ref dat) = self;"},
{"lineNum":"   72","line":"                $thing(dat.clone())"},
{"lineNum":"   73","line":"            }"},
{"lineNum":"   74","line":"        }"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        impl ::core::ops::Index<usize> for $thing {"},
{"lineNum":"   77","line":"            type Output = $ty;"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"            #[inline]"},
{"lineNum":"   80","line":"            fn index(&self, index: usize) -> &$ty {"},
{"lineNum":"   81","line":"                let &$thing(ref dat) = self;"},
{"lineNum":"   82","line":"                &dat[index]"},
{"lineNum":"   83","line":"            }"},
{"lineNum":"   84","line":"        }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        impl ::core::ops::Index<::core::ops::Range<usize>> for $thing {"},
{"lineNum":"   87","line":"            type Output = [$ty];"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"            #[inline]"},
{"lineNum":"   90","line":"            fn index(&self, index: ::core::ops::Range<usize>) -> &[$ty] {"},
{"lineNum":"   91","line":"                let &$thing(ref dat) = self;"},
{"lineNum":"   92","line":"                &dat[index]"},
{"lineNum":"   93","line":"            }"},
{"lineNum":"   94","line":"        }"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"        impl ::core::ops::Index<::core::ops::RangeTo<usize>> for $thing {"},
{"lineNum":"   97","line":"            type Output = [$ty];"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"            #[inline]"},
{"lineNum":"  100","line":"            fn index(&self, index: ::core::ops::RangeTo<usize>) -> &[$ty] {"},
{"lineNum":"  101","line":"                let &$thing(ref dat) = self;"},
{"lineNum":"  102","line":"                &dat[index]"},
{"lineNum":"  103","line":"            }"},
{"lineNum":"  104","line":"        }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        impl ::core::ops::Index<::core::ops::RangeFrom<usize>> for $thing {"},
{"lineNum":"  107","line":"            type Output = [$ty];"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"            #[inline]"},
{"lineNum":"  110","line":"            fn index(&self, index: ::core::ops::RangeFrom<usize>) -> &[$ty] {"},
{"lineNum":"  111","line":"                let &$thing(ref dat) = self;"},
{"lineNum":"  112","line":"                &dat[index]"},
{"lineNum":"  113","line":"            }"},
{"lineNum":"  114","line":"        }"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"        impl ::core::ops::Index<::core::ops::RangeFull> for $thing {"},
{"lineNum":"  117","line":"            type Output = [$ty];"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"            #[inline]"},
{"lineNum":"  120","line":"            fn index(&self, _: ::core::ops::RangeFull) -> &[$ty] {","class":"linePartCov","hits":"2","order":"2749","possible_hits":"4",},
{"lineNum":"  121","line":"                let &$thing(ref dat) = self;","class":"linePartCov","hits":"2","order":"2750","possible_hits":"4",},
{"lineNum":"  122","line":"                &dat[..]","class":"linePartCov","hits":"2","order":"2751","possible_hits":"4",},
{"lineNum":"  123","line":"            }","class":"linePartCov","hits":"2","order":"2752","possible_hits":"8",},
{"lineNum":"  124","line":"        }"},
{"lineNum":"  125","line":"        impl ::ffi::CPtr for $thing {"},
{"lineNum":"  126","line":"            type Target = $ty;"},
{"lineNum":"  127","line":"            fn as_c_ptr(&self) -> *const Self::Target {","class":"lineCov","hits":"2","order":"5108","possible_hits":"2",},
{"lineNum":"  128","line":"                if self.is_empty() {","class":"lineCov","hits":"4","order":"5109","possible_hits":"4",},
{"lineNum":"  129","line":"                    ::core::ptr::null()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  130","line":"                } else {"},
{"lineNum":"  131","line":"                    self.as_ptr()","class":"lineCov","hits":"2","order":"5111","possible_hits":"2",},
{"lineNum":"  132","line":"                }"},
{"lineNum":"  133","line":"            }","class":"linePartCov","hits":"2","order":"5116","possible_hits":"4",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"            fn as_mut_c_ptr(&mut self) -> *mut Self::Target {"},
{"lineNum":"  136","line":"                if self.is_empty() {"},
{"lineNum":"  137","line":"                    ::core::ptr::null::<Self::Target>() as *mut _"},
{"lineNum":"  138","line":"                } else {"},
{"lineNum":"  139","line":"                    self.as_mut_ptr()"},
{"lineNum":"  140","line":"                }"},
{"lineNum":"  141","line":"            }"},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":"    }"},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"macro_rules! impl_pretty_debug {"},
{"lineNum":"  147","line":"    ($thing:ident) => {"},
{"lineNum":"  148","line":"        impl ::core::fmt::Debug for $thing {"},
{"lineNum":"  149","line":"            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {"},
{"lineNum":"  150","line":"                try!(write!(f, \"{}(\", stringify!($thing)));"},
{"lineNum":"  151","line":"                for i in self[..].iter().cloned() {"},
{"lineNum":"  152","line":"                    try!(write!(f, \"{:02x}\", i));"},
{"lineNum":"  153","line":"                }"},
{"lineNum":"  154","line":"                write!(f, \")\")"},
{"lineNum":"  155","line":"            }"},
{"lineNum":"  156","line":"        }"},
{"lineNum":"  157","line":"     }"},
{"lineNum":"  158","line":"}"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"macro_rules! impl_raw_debug {"},
{"lineNum":"  161","line":"    ($thing:ident) => {"},
{"lineNum":"  162","line":"        impl ::core::fmt::Debug for $thing {"},
{"lineNum":"  163","line":"            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  164","line":"                for i in self[..].iter().cloned() {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  165","line":"                    try!(write!(f, \"{:02x}\", i));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  166","line":"                }"},
{"lineNum":"  167","line":"                Ok(())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":"     }"},
{"lineNum":"  171","line":"}"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"#[cfg(feature=\"serde\")]"},
{"lineNum":"  174","line":"/// Implements `Serialize` and `Deserialize` for a type `$t` which represents"},
{"lineNum":"  175","line":"/// a newtype over a byte-slice over length `$len`. Type `$t` must implement"},
{"lineNum":"  176","line":"/// the `FromStr` and `Display` trait."},
{"lineNum":"  177","line":"macro_rules! serde_impl("},
{"lineNum":"  178","line":"    ($t:ident, $len:expr) => ("},
{"lineNum":"  179","line":"        impl ::serde::Serialize for $t {"},
{"lineNum":"  180","line":"            fn serialize<S: ::serde::Serializer>(&self, s: S) -> Result<S::Ok, S::Error> {"},
{"lineNum":"  181","line":"                if s.is_human_readable() {"},
{"lineNum":"  182","line":"                    s.collect_str(self)"},
{"lineNum":"  183","line":"                } else {"},
{"lineNum":"  184","line":"                    s.serialize_bytes(&self[..])"},
{"lineNum":"  185","line":"                }"},
{"lineNum":"  186","line":"            }"},
{"lineNum":"  187","line":"        }"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"        impl<\'de> ::serde::Deserialize<\'de> for $t {"},
{"lineNum":"  190","line":"            fn deserialize<D: ::serde::Deserializer<\'de>>(d: D) -> Result<$t, D::Error> {"},
{"lineNum":"  191","line":"                use ::serde::de::Error;"},
{"lineNum":"  192","line":"                use core::str::FromStr;"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"                if d.is_human_readable() {"},
{"lineNum":"  195","line":"                    let sl: &str = ::serde::Deserialize::deserialize(d)?;"},
{"lineNum":"  196","line":"                    SecretKey::from_str(sl).map_err(D::Error::custom)"},
{"lineNum":"  197","line":"                } else {"},
{"lineNum":"  198","line":"                    let sl: &[u8] = ::serde::Deserialize::deserialize(d)?;"},
{"lineNum":"  199","line":"                    if sl.len() != $len {"},
{"lineNum":"  200","line":"                        Err(D::Error::invalid_length(sl.len(), &stringify!($len)))"},
{"lineNum":"  201","line":"                    } else {"},
{"lineNum":"  202","line":"                        let mut ret = [0; $len];"},
{"lineNum":"  203","line":"                        ret.copy_from_slice(sl);"},
{"lineNum":"  204","line":"                        Ok($t(ret))"},
{"lineNum":"  205","line":"                    }"},
{"lineNum":"  206","line":"                }"},
{"lineNum":"  207","line":"            }"},
{"lineNum":"  208","line":"        }"},
{"lineNum":"  209","line":"    )"},
{"lineNum":"  210","line":");"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"#[cfg(not(feature=\"serde\"))]"},
{"lineNum":"  213","line":"macro_rules! serde_impl("},
{"lineNum":"  214","line":"    ($t:ident, $len:expr) => ()"},
{"lineNum":"  215","line":");"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-3332d6d4aab2c25c", "date" : "2020-05-23 13:12:48", "instrumented" : 22, "covered" : 16,};
var merged_data = [];
