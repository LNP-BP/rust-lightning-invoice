var data = {lines:[
{"lineNum":"    1","line":"use std::fmt;"},
{"lineNum":"    2","line":"use std::fmt::{Display, Formatter};"},
{"lineNum":"    3","line":"use bech32::{ToBase32, u5, WriteBase32, Base32Len};"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"use ::*;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"/// Converts a stream of bytes written to it to base32. On finalization the according padding will"},
{"lineNum":"    8","line":"/// be applied. That means the results of writing two data blocks with one or two `BytesToBase32`"},
{"lineNum":"    9","line":"/// converters will differ."},
{"lineNum":"   10","line":"struct BytesToBase32<\'a, W: WriteBase32 + \'a> {"},
{"lineNum":"   11","line":"\t/// Target for writing the resulting `u5`s resulting from the written bytes"},
{"lineNum":"   12","line":"\twriter: &\'a mut W,"},
{"lineNum":"   13","line":"\t/// Holds all unwritten bits left over from last round. The bits are stored beginning from"},
{"lineNum":"   14","line":"\t/// the most significant bit. E.g. if buffer_bits=3, then the byte with bits a, b and c will"},
{"lineNum":"   15","line":"\t/// look as follows: [a, b, c, 0, 0, 0, 0, 0]"},
{"lineNum":"   16","line":"\tbuffer: u8,"},
{"lineNum":"   17","line":"\t/// Amount of bits left over from last round, stored in buffer."},
{"lineNum":"   18","line":"\tbuffer_bits: u8,"},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"impl<\'a, W: WriteBase32> BytesToBase32<\'a, W> {"},
{"lineNum":"   22","line":"\t/// Create a new bytes-to-base32 converter with `writer` as  a sink for the resulting base32"},
{"lineNum":"   23","line":"\t/// data."},
{"lineNum":"   24","line":"\tpub fn new(writer: &\'a mut W) -> BytesToBase32<\'a, W> {","class":"lineCov","hits":"1","order":"5378","possible_hits":"1",},
{"lineNum":"   25","line":"\t\tBytesToBase32 {","class":"lineCov","hits":"1","order":"5379","possible_hits":"1",},
{"lineNum":"   26","line":"\t\t\twriter,"},
{"lineNum":"   27","line":"\t\t\tbuffer: 0,"},
{"lineNum":"   28","line":"\t\t\tbuffer_bits: 0,"},
{"lineNum":"   29","line":"\t\t}"},
{"lineNum":"   30","line":"\t}","class":"linePartCov","hits":"1","order":"5380","possible_hits":"2",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"\t/// Add more bytes to the current conversion unit"},
{"lineNum":"   33","line":"\tpub fn append(&mut self, bytes: &[u8]) -> Result<(), W::Err> {","class":"linePartCov","hits":"1","order":"5385","possible_hits":"2",},
{"lineNum":"   34","line":"\t\tfor b in bytes {","class":"linePartCov","hits":"2","order":"5386","possible_hits":"3",},
{"lineNum":"   35","line":"\t\t\tself.append_u8(*b)?;","class":"linePartCov","hits":"2","order":"5387","possible_hits":"3",},
{"lineNum":"   36","line":"\t\t}"},
{"lineNum":"   37","line":"\t\tOk(())","class":"lineCov","hits":"1","order":"5414","possible_hits":"1",},
{"lineNum":"   38","line":"\t}","class":"lineCov","hits":"2","order":"5415","possible_hits":"2",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"\tpub fn append_u8(&mut self, byte: u8) -> Result<(), W::Err> {","class":"linePartCov","hits":"1","order":"5388","possible_hits":"2",},
{"lineNum":"   41","line":"\t\t// Write first u5 if we have to write two u5s this round. That only happens if the"},
{"lineNum":"   42","line":"\t\t// buffer holds too many bits, so we don\'t have to combine buffer bits with new bits"},
{"lineNum":"   43","line":"\t\t// from this rounds byte."},
{"lineNum":"   44","line":"\t\tif self.buffer_bits >= 5 {","class":"lineCov","hits":"1","order":"5389","possible_hits":"1",},
{"lineNum":"   45","line":"\t\t\tself.writer.write_u5(","class":"linePartCov","hits":"2","order":"5406","possible_hits":"3",},
{"lineNum":"   46","line":"\t\t\t\tu5::try_from_u8((self.buffer & 0b11111000) >> 3 ).expect(\"<32\")","class":"lineCov","hits":"1","order":"5408","possible_hits":"1",},
{"lineNum":"   47","line":"\t\t\t)?;","class":"linePartCov","hits":"1","order":"5411","possible_hits":"3",},
{"lineNum":"   48","line":"\t\t\tself.buffer = self.buffer << 5;","class":"lineCov","hits":"1","order":"5412","possible_hits":"1",},
{"lineNum":"   49","line":"\t\t\tself.buffer_bits -= 5;","class":"linePartCov","hits":"1","order":"5413","possible_hits":"2",},
{"lineNum":"   50","line":"\t\t}"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"\t\t// Combine all bits from buffer with enough bits from this rounds byte so that they fill"},
{"lineNum":"   53","line":"\t\t// a u5. Save reamining bits from byte to buffer."},
{"lineNum":"   54","line":"\t\tlet from_buffer = self.buffer >> 3;","class":"lineCov","hits":"1","order":"5391","possible_hits":"1",},
{"lineNum":"   55","line":"\t\tlet from_byte = byte >> (3 + self.buffer_bits); // buffer_bits <= 4","class":"linePartCov","hits":"1","order":"5392","possible_hits":"2",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"\t\tself.writer.write_u5(u5::try_from_u8(from_buffer | from_byte).expect(\"<32\"))?;","class":"lineCov","hits":"1","order":"5394","possible_hits":"1",},
{"lineNum":"   58","line":"\t\tself.buffer = byte << (5 - self.buffer_bits);","class":"linePartCov","hits":"1","order":"5396","possible_hits":"2",},
{"lineNum":"   59","line":"\t\tself.buffer_bits = 3 + self.buffer_bits;","class":"linePartCov","hits":"1","order":"5397","possible_hits":"3",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"\t\tOk(())","class":"lineCov","hits":"1","order":"5399","possible_hits":"1",},
{"lineNum":"   62","line":"\t}","class":"lineCov","hits":"2","order":"5401","possible_hits":"2",},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"\tpub fn finalize(mut self) ->  Result<(), W::Err> {","class":"linePartCov","hits":"1","order":"5557","possible_hits":"2",},
{"lineNum":"   65","line":"\t\tself.inner_finalize()?;","class":"linePartCov","hits":"2","order":"5559","possible_hits":"3",},
{"lineNum":"   66","line":"\t\tstd::mem::forget(self);","class":"lineCov","hits":"1","order":"5585","possible_hits":"1",},
{"lineNum":"   67","line":"\t\tOk(())","class":"lineCov","hits":"1","order":"5590","possible_hits":"1",},
{"lineNum":"   68","line":"\t}","class":"linePartCov","hits":"2","order":"5591","possible_hits":"3",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"\tfn inner_finalize(&mut self) -> Result<(), W::Err>{","class":"linePartCov","hits":"1","order":"5561","possible_hits":"2",},
{"lineNum":"   71","line":"\t\t// There can be at most two u5s left in the buffer after processing all bytes, write them."},
{"lineNum":"   72","line":"\t\tif self.buffer_bits >= 5 {","class":"lineCov","hits":"1","order":"5562","possible_hits":"1",},
{"lineNum":"   73","line":"\t\t\tself.writer.write_u5(","class":"linePartCov","hits":"2","order":"5564","possible_hits":"3",},
{"lineNum":"   74","line":"\t\t\t\tu5::try_from_u8((self.buffer & 0b11111000) >> 3).expect(\"<32\")","class":"lineCov","hits":"1","order":"5566","possible_hits":"1",},
{"lineNum":"   75","line":"\t\t\t)?;","class":"linePartCov","hits":"1","order":"5569","possible_hits":"3",},
{"lineNum":"   76","line":"\t\t\tself.buffer = self.buffer << 5;","class":"lineCov","hits":"1","order":"5571","possible_hits":"1",},
{"lineNum":"   77","line":"\t\t\tself.buffer_bits -= 5;","class":"linePartCov","hits":"1","order":"5573","possible_hits":"2",},
{"lineNum":"   78","line":"\t\t}"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"\t\tif self.buffer_bits != 0 {","class":"lineCov","hits":"2","order":"5575","possible_hits":"2",},
{"lineNum":"   81","line":"\t\t\tself.writer.write_u5(u5::try_from_u8(self.buffer >> 3).expect(\"<32\"))?;","class":"lineCov","hits":"1","order":"5577","possible_hits":"1",},
{"lineNum":"   82","line":"\t\t}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"\t\tOk(())","class":"lineCov","hits":"1","order":"5580","possible_hits":"1",},
{"lineNum":"   85","line":"\t}","class":"lineCov","hits":"2","order":"5582","possible_hits":"2",},
{"lineNum":"   86","line":"}"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"impl<\'a, W: WriteBase32> Drop for BytesToBase32<\'a, W> {"},
{"lineNum":"   89","line":"\tfn drop(&mut self) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"\t\tself.inner_finalize()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"\t\t\t.expect(\"Unhandled error when finalizing conversion on drop. User finalize to handle.\")"},
{"lineNum":"   92","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"}"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"/// Calculates the base32 encoded size of a byte slice"},
{"lineNum":"   96","line":"fn bytes_size_to_base32_size(byte_size: usize) -> usize {","class":"lineCov","hits":"1","order":"5220","possible_hits":"1",},
{"lineNum":"   97","line":"\tlet bits = byte_size * 8;","class":"linePartCov","hits":"1","order":"5221","possible_hits":"2",},
{"lineNum":"   98","line":"\tif bits % 5 == 0 {","class":"linePartCov","hits":"1","order":"5222","possible_hits":"2",},
{"lineNum":"   99","line":"\t\t// without padding bits"},
{"lineNum":"  100","line":"\t\tbits / 5","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"\t} else {"},
{"lineNum":"  102","line":"\t\t// with padding bits"},
{"lineNum":"  103","line":"\t\tbits / 5 + 1","class":"linePartCov","hits":"2","order":"5223","possible_hits":"4",},
{"lineNum":"  104","line":"\t}"},
{"lineNum":"  105","line":"}","class":"lineCov","hits":"1","order":"5224","possible_hits":"1",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"impl Display for Invoice {"},
{"lineNum":"  108","line":"\tfn fmt(&self, f: &mut Formatter) -> Result<(), fmt::Error> {"},
{"lineNum":"  109","line":"\t\tself.signed_invoice.fmt(f)"},
{"lineNum":"  110","line":"\t}"},
{"lineNum":"  111","line":"}"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"impl Display for SignedRawInvoice {"},
{"lineNum":"  114","line":"\tfn fmt(&self, f: &mut Formatter) -> Result<(), fmt::Error> {"},
{"lineNum":"  115","line":"\t\tlet hrp = self.raw_invoice.hrp.to_string();"},
{"lineNum":"  116","line":"\t\tlet mut data  = self.raw_invoice.data.to_base32();"},
{"lineNum":"  117","line":"\t\tdata.extend_from_slice(&self.signature.to_base32());"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"\t\tbech32::encode_to_fmt(f, &hrp, data).expect(\"HRP is valid\")?;"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"\t\tOk(())"},
{"lineNum":"  122","line":"\t}"},
{"lineNum":"  123","line":"}"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"impl Display for RawHrp {"},
{"lineNum":"  126","line":"\tfn fmt(&self, f: &mut Formatter) -> Result<(), fmt::Error> {","class":"linePartCov","hits":"1","order":"3797","possible_hits":"2",},
{"lineNum":"  127","line":"\t\tlet amount = match self.raw_amount {","class":"linePartCov","hits":"1","order":"3827","possible_hits":"2",},
{"lineNum":"  128","line":"\t\t\tSome(ref amt) => amt.to_string(),","class":"lineCov","hits":"2","order":"3799","possible_hits":"2",},
{"lineNum":"  129","line":"\t\t\tNone => String::new(),","class":"lineCov","hits":"1","order":"4117","possible_hits":"1",},
{"lineNum":"  130","line":"\t\t};"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"\t\tlet si_prefix = match self.si_prefix {","class":"linePartCov","hits":"1","order":"3855","possible_hits":"2",},
{"lineNum":"  133","line":"\t\t\tSome(ref si) => si.to_string(),","class":"lineCov","hits":"2","order":"3829","possible_hits":"2",},
{"lineNum":"  134","line":"\t\t\tNone => String::new(),","class":"lineCov","hits":"2","order":"4118","possible_hits":"2",},
{"lineNum":"  135","line":"\t\t};"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"\t\twrite!(","class":"lineCov","hits":"2","order":"3858","possible_hits":"2",},
{"lineNum":"  138","line":"\t\t\tf,"},
{"lineNum":"  139","line":"\t\t\t\"ln{}{}{}\",","class":"lineCov","hits":"1","order":"3856","possible_hits":"1",},
{"lineNum":"  140","line":"\t\t\tself.currency,","class":"lineCov","hits":"1","order":"3857","possible_hits":"1",},
{"lineNum":"  141","line":"\t\t\tamount,"},
{"lineNum":"  142","line":"\t\t\tsi_prefix"},
{"lineNum":"  143","line":"\t\t)"},
{"lineNum":"  144","line":"\t}","class":"linePartCov","hits":"1","order":"3863","possible_hits":"3",},
{"lineNum":"  145","line":"}"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"impl Display for Currency {"},
{"lineNum":"  148","line":"\tfn fmt(&self, f: &mut Formatter) -> Result<(), fmt::Error> {","class":"lineCov","hits":"1","order":"3137","possible_hits":"1",},
{"lineNum":"  149","line":"\t\tlet currency_code = match *self {","class":"lineCov","hits":"2","order":"3139","possible_hits":"2",},
{"lineNum":"  150","line":"\t\t\tCurrency::Bitcoin => \"bc\",","class":"lineCov","hits":"2","order":"3138","possible_hits":"2",},
{"lineNum":"  151","line":"\t\t\tCurrency::BitcoinTestnet => \"tb\",","class":"lineCov","hits":"1","order":"3171","possible_hits":"1",},
{"lineNum":"  152","line":"\t\t\tCurrency::Regtest => \"bcrt\",","class":"lineCov","hits":"1","order":"3173","possible_hits":"1",},
{"lineNum":"  153","line":"\t\t};"},
{"lineNum":"  154","line":"\t\twrite!(f, \"{}\", currency_code)","class":"lineCov","hits":"1","order":"3140","possible_hits":"1",},
{"lineNum":"  155","line":"\t}","class":"linePartCov","hits":"1","order":"3154","possible_hits":"2",},
{"lineNum":"  156","line":"}"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"impl Display for SiPrefix {"},
{"lineNum":"  159","line":"\tfn fmt(&self, f: &mut Formatter) -> Result<(), fmt::Error> {","class":"lineCov","hits":"1","order":"3841","possible_hits":"1",},
{"lineNum":"  160","line":"\t\twrite!(f, \"{}\",","class":"lineCov","hits":"2","order":"3843","possible_hits":"2",},
{"lineNum":"  161","line":"\t\t\tmatch *self {","class":"linePartCov","hits":"2","order":"3849","possible_hits":"3",},
{"lineNum":"  162","line":"\t\t\t\tSiPrefix::Milli => \"m\",","class":"linePartCov","hits":"1","order":"3845","possible_hits":"2",},
{"lineNum":"  163","line":"\t\t\t\tSiPrefix::Micro => \"u\",","class":"lineCov","hits":"1","order":"3847","possible_hits":"1",},
{"lineNum":"  164","line":"\t\t\t\tSiPrefix::Nano => \"n\",","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"\t\t\t\tSiPrefix::Pico => \"p\",","class":"lineCov","hits":"1","order":"5215","possible_hits":"1",},
{"lineNum":"  166","line":"\t\t\t}"},
{"lineNum":"  167","line":"\t\t)"},
{"lineNum":"  168","line":"\t}","class":"linePartCov","hits":"1","order":"3852","possible_hits":"2",},
{"lineNum":"  169","line":"}"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"fn encode_int_be_base32(int: u64) -> Vec<u5> {","class":"linePartCov","hits":"1","order":"3529","possible_hits":"2",},
{"lineNum":"  172","line":"\tlet base = 32u64;","class":"lineCov","hits":"1","order":"3530","possible_hits":"1",},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"\tlet mut out_vec = Vec::<u5>::new();","class":"lineCov","hits":"1","order":"3531","possible_hits":"1",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"\tlet mut rem_int = int;","class":"lineCov","hits":"1","order":"3532","possible_hits":"1",},
{"lineNum":"  177","line":"\twhile rem_int != 0 {","class":"lineCov","hits":"2","order":"3533","possible_hits":"2",},
{"lineNum":"  178","line":"\t\tout_vec.push(u5::try_from_u8((rem_int % base) as u8).expect(\"always <32\"));","class":"lineCov","hits":"1","order":"3534","possible_hits":"1",},
{"lineNum":"  179","line":"\t\trem_int /= base;","class":"lineCov","hits":"1","order":"3535","possible_hits":"1",},
{"lineNum":"  180","line":"\t}"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"\tout_vec.reverse();","class":"lineCov","hits":"2","order":"3537","possible_hits":"2",},
{"lineNum":"  183","line":"\tout_vec","class":"lineCov","hits":"1","order":"3544","possible_hits":"1",},
{"lineNum":"  184","line":"}","class":"linePartCov","hits":"1","order":"3546","possible_hits":"2",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"fn encoded_int_be_base32_size(int: u64) -> usize {","class":"lineCov","hits":"1","order":"5323","possible_hits":"1",},
{"lineNum":"  187","line":"\tfor pos in (0..13).rev() {","class":"linePartCov","hits":"2","order":"5324","possible_hits":"3",},
{"lineNum":"  188","line":"\t\tif int & (0x1f << (5 * pos)) != 0 {","class":"linePartCov","hits":"1","order":"5342","possible_hits":"2",},
{"lineNum":"  189","line":"\t\t\treturn (pos + 1) as usize;","class":"linePartCov","hits":"2","order":"5343","possible_hits":"4",},
{"lineNum":"  190","line":"\t\t}"},
{"lineNum":"  191","line":"\t}"},
{"lineNum":"  192","line":"\t0usize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"}","class":"linePartCov","hits":"1","order":"5344","possible_hits":"2",},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"fn encode_int_be_base256<T: Into<u64>>(int: T) -> Vec<u8> {","class":"linePartCov","hits":"3","order":"3323","possible_hits":"6",},
{"lineNum":"  196","line":"\tlet base = 256u64;","class":"lineCov","hits":"3","order":"3324","possible_hits":"3",},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"\tlet mut out_vec = Vec::<u8>::new();","class":"lineCov","hits":"3","order":"3325","possible_hits":"3",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"\tlet mut rem_int: u64 = int.into();","class":"lineCov","hits":"3","order":"3326","possible_hits":"3",},
{"lineNum":"  201","line":"\twhile rem_int != 0 {","class":"lineCov","hits":"9","order":"3327","possible_hits":"9",},
{"lineNum":"  202","line":"\t\tout_vec.push((rem_int % base) as u8);","class":"lineCov","hits":"3","order":"3328","possible_hits":"3",},
{"lineNum":"  203","line":"\t\trem_int /= base;","class":"lineCov","hits":"3","order":"3329","possible_hits":"3",},
{"lineNum":"  204","line":"\t}"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"\tout_vec.reverse();","class":"lineCov","hits":"6","order":"3330","possible_hits":"6",},
{"lineNum":"  207","line":"\tout_vec","class":"lineCov","hits":"3","order":"3371","possible_hits":"3",},
{"lineNum":"  208","line":"}","class":"linePartCov","hits":"3","order":"3373","possible_hits":"6",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"/// Appends the default value of `T` to the front of the `in_vec` till it reaches the length"},
{"lineNum":"  211","line":"/// `target_length`. If `in_vec` already is too lang `None` is returned."},
{"lineNum":"  212","line":"fn try_stretch<T>(mut in_vec: Vec<T>, target_len: usize) -> Option<Vec<T>>","class":"linePartCov","hits":"2","order":"4130","possible_hits":"4",},
{"lineNum":"  213","line":"\twhere T: Default + Copy"},
{"lineNum":"  214","line":"{"},
{"lineNum":"  215","line":"\tif in_vec.len() > target_len {","class":"linePartCov","hits":"6","order":"4131","possible_hits":"8",},
{"lineNum":"  216","line":"\t\tNone","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  217","line":"\t} else if in_vec.len() == target_len {","class":"linePartCov","hits":"5","order":"4132","possible_hits":"6",},
{"lineNum":"  218","line":"\t\tSome(in_vec)","class":"linePartCov","hits":"1","order":"4133","possible_hits":"2",},
{"lineNum":"  219","line":"\t} else {"},
{"lineNum":"  220","line":"\t\tlet mut out_vec = Vec::<T>::with_capacity(target_len);","class":"lineCov","hits":"2","order":"4203","possible_hits":"2",},
{"lineNum":"  221","line":"\t\tout_vec.append(&mut vec![T::default(); target_len - in_vec.len()]);","class":"linePartCov","hits":"4","order":"4204","possible_hits":"6",},
{"lineNum":"  222","line":"\t\tout_vec.append(&mut in_vec);","class":"lineCov","hits":"2","order":"4216","possible_hits":"2",},
{"lineNum":"  223","line":"\t\tSome(out_vec)","class":"lineCov","hits":"2","order":"4217","possible_hits":"2",},
{"lineNum":"  224","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  225","line":"}","class":"linePartCov","hits":"2","order":"4134","possible_hits":"4",},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"impl ToBase32 for RawDataPart {"},
{"lineNum":"  228","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"linePartCov","hits":"1","order":"4123","possible_hits":"2",},
{"lineNum":"  229","line":"\t\t// encode timestamp"},
{"lineNum":"  230","line":"\t\tself.timestamp.write_base32(writer)?;","class":"linePartCov","hits":"2","order":"4124","possible_hits":"3",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"\t\t// encode tagged fields"},
{"lineNum":"  233","line":"\t\tfor tagged_field in self.tagged_fields.iter() {","class":"linePartCov","hits":"2","order":"4140","possible_hits":"3",},
{"lineNum":"  234","line":"\t\t\ttagged_field.write_base32(writer)?;","class":"lineCov","hits":"1","order":"4141","possible_hits":"1",},
{"lineNum":"  235","line":"\t\t}"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"\t\tOk(())","class":"lineCov","hits":"1","order":"4224","possible_hits":"1",},
{"lineNum":"  238","line":"\t}","class":"lineCov","hits":"2","order":"4225","possible_hits":"2",},
{"lineNum":"  239","line":"}"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"impl ToBase32 for PositiveTimestamp {"},
{"lineNum":"  242","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"linePartCov","hits":"1","order":"4125","possible_hits":"2",},
{"lineNum":"  243","line":"\t\t// FIXME: use writer for int encoding"},
{"lineNum":"  244","line":"\t\twriter.write(","class":"lineCov","hits":"1","order":"4135","possible_hits":"1",},
{"lineNum":"  245","line":"\t\t\t&try_stretch(encode_int_be_base32(self.as_unix_timestamp()), 7)","class":"lineCov","hits":"2","order":"4126","possible_hits":"2",},
{"lineNum":"  246","line":"\t\t\t\t.expect(\"Can\'t be longer due than 7 u5s due to timestamp bounds\")"},
{"lineNum":"  247","line":"\t\t)"},
{"lineNum":"  248","line":"\t}","class":"linePartCov","hits":"1","order":"4139","possible_hits":"2",},
{"lineNum":"  249","line":"}"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"impl ToBase32 for RawTaggedField {"},
{"lineNum":"  252","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"lineCov","hits":"1","order":"4142","possible_hits":"1",},
{"lineNum":"  253","line":"\t\tmatch *self {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"\t\t\tRawTaggedField::UnknownSemantics(ref content) => {","class":"linePartCov","hits":"1","order":"4143","possible_hits":"2",},
{"lineNum":"  255","line":"\t\t\t\twriter.write(content)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"\t\t\t},"},
{"lineNum":"  257","line":"\t\t\tRawTaggedField::KnownSemantics(ref tagged_field) => {","class":"lineCov","hits":"1","order":"4144","possible_hits":"1",},
{"lineNum":"  258","line":"\t\t\t\ttagged_field.write_base32(writer)","class":"lineCov","hits":"1","order":"4145","possible_hits":"1",},
{"lineNum":"  259","line":"\t\t\t}"},
{"lineNum":"  260","line":"\t\t}"},
{"lineNum":"  261","line":"\t}","class":"linePartCov","hits":"1","order":"4197","possible_hits":"2",},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"impl ToBase32 for Sha256 {"},
{"lineNum":"  265","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"lineCov","hits":"1","order":"4170","possible_hits":"1",},
{"lineNum":"  266","line":"\t\t(&self.0[..]).write_base32(writer)","class":"lineCov","hits":"1","order":"4171","possible_hits":"1",},
{"lineNum":"  267","line":"\t}","class":"linePartCov","hits":"1","order":"4193","possible_hits":"2",},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":"impl Base32Len for Sha256 {"},
{"lineNum":"  270","line":"\tfn base32_len(&self) -> usize {","class":"lineCov","hits":"1","order":"4151","possible_hits":"1",},
{"lineNum":"  271","line":"\t\t(&self.0[..]).base32_len()","class":"lineCov","hits":"1","order":"4152","possible_hits":"1",},
{"lineNum":"  272","line":"\t}","class":"linePartCov","hits":"1","order":"4160","possible_hits":"2",},
{"lineNum":"  273","line":"}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"impl ToBase32 for Description {"},
{"lineNum":"  276","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"lineCov","hits":"1","order":"4218","possible_hits":"1",},
{"lineNum":"  277","line":"\t\tself.as_bytes().write_base32(writer)","class":"lineCov","hits":"2","order":"4219","possible_hits":"2",},
{"lineNum":"  278","line":"\t}","class":"linePartCov","hits":"1","order":"4223","possible_hits":"2",},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"impl Base32Len for Description {"},
{"lineNum":"  282","line":"\tfn base32_len(&self) -> usize {","class":"lineCov","hits":"1","order":"4200","possible_hits":"1",},
{"lineNum":"  283","line":"\t\tself.0.as_bytes().base32_len()","class":"lineCov","hits":"1","order":"4201","possible_hits":"1",},
{"lineNum":"  284","line":"\t}","class":"linePartCov","hits":"1","order":"4202","possible_hits":"2",},
{"lineNum":"  285","line":"}"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"impl ToBase32 for PayeePubKey {"},
{"lineNum":"  288","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"lineCov","hits":"1","order":"5226","possible_hits":"1",},
{"lineNum":"  289","line":"\t\t(&self.serialize()[..]).write_base32(writer)","class":"lineCov","hits":"1","order":"5227","possible_hits":"1",},
{"lineNum":"  290","line":"\t}","class":"linePartCov","hits":"1","order":"5318","possible_hits":"2",},
{"lineNum":"  291","line":"}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"impl Base32Len for PayeePubKey {"},
{"lineNum":"  294","line":"\tfn base32_len(&self) -> usize {","class":"lineCov","hits":"1","order":"5218","possible_hits":"1",},
{"lineNum":"  295","line":"\t\tbytes_size_to_base32_size(secp256k1::constants::PUBLIC_KEY_SIZE)","class":"lineCov","hits":"1","order":"5219","possible_hits":"1",},
{"lineNum":"  296","line":"\t}","class":"linePartCov","hits":"1","order":"5225","possible_hits":"2",},
{"lineNum":"  297","line":"}"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"impl ToBase32 for ExpiryTime {"},
{"lineNum":"  300","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"linePartCov","hits":"1","order":"5346","possible_hits":"2",},
{"lineNum":"  301","line":"\t\twriter.write(&encode_int_be_base32(self.as_seconds()))","class":"lineCov","hits":"2","order":"5347","possible_hits":"2",},
{"lineNum":"  302","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"}"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"impl Base32Len for ExpiryTime {"},
{"lineNum":"  306","line":"\tfn base32_len(&self) -> usize {","class":"lineCov","hits":"1","order":"5321","possible_hits":"1",},
{"lineNum":"  307","line":"\t\tencoded_int_be_base32_size(self.0.as_secs())","class":"lineCov","hits":"1","order":"5322","possible_hits":"1",},
{"lineNum":"  308","line":"\t}","class":"linePartCov","hits":"1","order":"5345","possible_hits":"2",},
{"lineNum":"  309","line":"}"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"impl ToBase32 for MinFinalCltvExpiry {"},
{"lineNum":"  312","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"linePartCov","hits":"1","order":"5356","possible_hits":"2",},
{"lineNum":"  313","line":"\t\twriter.write(&encode_int_be_base32(self.0))","class":"lineCov","hits":"2","order":"5357","possible_hits":"2",},
{"lineNum":"  314","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"}"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"impl Base32Len for MinFinalCltvExpiry {"},
{"lineNum":"  318","line":"\tfn base32_len(&self) -> usize {","class":"lineCov","hits":"1","order":"5353","possible_hits":"1",},
{"lineNum":"  319","line":"\t\tencoded_int_be_base32_size(self.0)","class":"lineCov","hits":"1","order":"5354","possible_hits":"1",},
{"lineNum":"  320","line":"\t}","class":"linePartCov","hits":"1","order":"5355","possible_hits":"2",},
{"lineNum":"  321","line":"}"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"impl ToBase32 for Fallback {"},
{"lineNum":"  324","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"linePartCov","hits":"1","order":"5364","possible_hits":"2",},
{"lineNum":"  325","line":"\t\tmatch *self {","class":"linePartCov","hits":"1","order":"5369","possible_hits":"4",},
{"lineNum":"  326","line":"\t\t\tFallback::SegWitProgram {version: v, program: ref p} => {","class":"linePartCov","hits":"1","order":"5365","possible_hits":"2",},
{"lineNum":"  327","line":"\t\t\t\twriter.write_u5(v)?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  328","line":"\t\t\t\tp.write_base32(writer)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"\t\t\t},"},
{"lineNum":"  330","line":"\t\t\tFallback::PubKeyHash(ref hash) => {","class":"lineCov","hits":"1","order":"5366","possible_hits":"1",},
{"lineNum":"  331","line":"\t\t\t\twriter.write_u5(u5::try_from_u8(17).expect(\"17 < 32\"))?;","class":"lineCov","hits":"1","order":"5367","possible_hits":"1",},
{"lineNum":"  332","line":"\t\t\t\t(&hash[..]).write_base32(writer)","class":"lineCov","hits":"1","order":"5368","possible_hits":"1",},
{"lineNum":"  333","line":"\t\t\t},"},
{"lineNum":"  334","line":"\t\t\tFallback::ScriptHash(ref hash) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"\t\t\t\twriter.write_u5(u5::try_from_u8(18).expect(\"18 < 32\"))?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  336","line":"\t\t\t\t(&hash[..]).write_base32(writer)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  337","line":"\t\t\t}"},
{"lineNum":"  338","line":"\t\t}"},
{"lineNum":"  339","line":"\t}","class":"lineCov","hits":"1","order":"5370","possible_hits":"1",},
{"lineNum":"  340","line":"}"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"impl Base32Len for Fallback {"},
{"lineNum":"  343","line":"\tfn base32_len(&self) -> usize {","class":"lineCov","hits":"1","order":"5360","possible_hits":"1",},
{"lineNum":"  344","line":"\t\tmatch *self {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  345","line":"\t\t\tFallback::SegWitProgram {program: ref p, ..} => {","class":"linePartCov","hits":"1","order":"5361","possible_hits":"2",},
{"lineNum":"  346","line":"\t\t\t\tbytes_size_to_base32_size(p.len()) + 1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  347","line":"\t\t\t},"},
{"lineNum":"  348","line":"\t\t\tFallback::PubKeyHash(_) | Fallback::ScriptHash(_) => {"},
{"lineNum":"  349","line":"\t\t\t\t33","class":"lineCov","hits":"1","order":"5362","possible_hits":"1",},
{"lineNum":"  350","line":"\t\t\t},"},
{"lineNum":"  351","line":"\t\t}"},
{"lineNum":"  352","line":"\t}","class":"lineCov","hits":"1","order":"5363","possible_hits":"1",},
{"lineNum":"  353","line":"}"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"impl ToBase32 for Route {"},
{"lineNum":"  356","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"linePartCov","hits":"1","order":"5376","possible_hits":"2",},
{"lineNum":"  357","line":"\t\tlet mut converter = BytesToBase32::new(writer);","class":"lineCov","hits":"1","order":"5377","possible_hits":"1",},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"\t\tfor hop in self.iter() {","class":"linePartCov","hits":"2","order":"5381","possible_hits":"3",},
{"lineNum":"  360","line":"\t\t\tconverter.append(&hop.pubkey.serialize()[..])?;","class":"linePartCov","hits":"1","order":"5384","possible_hits":"3",},
{"lineNum":"  361","line":"\t\t\tconverter.append(&hop.short_channel_id[..])?;","class":"lineCov","hits":"1","order":"5416","possible_hits":"1",},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"\t\t\tlet fee_base_msat = try_stretch(","class":"lineCov","hits":"1","order":"5435","possible_hits":"1",},
{"lineNum":"  364","line":"\t\t\t\tencode_int_be_base256(hop.fee_base_msat),","class":"lineCov","hits":"1","order":"5417","possible_hits":"1",},
{"lineNum":"  365","line":"\t\t\t\t4"},
{"lineNum":"  366","line":"\t\t\t).expect(\"sizeof(u32) == 4\");"},
{"lineNum":"  367","line":"\t\t\tconverter.append(&fee_base_msat)?;","class":"linePartCov","hits":"2","order":"5498","possible_hits":"3",},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"\t\t\tlet fee_proportional_millionths = try_stretch(","class":"lineCov","hits":"1","order":"5504","possible_hits":"1",},
{"lineNum":"  370","line":"\t\t\t\tencode_int_be_base256(hop.fee_proportional_millionths),","class":"lineCov","hits":"1","order":"5502","possible_hits":"1",},
{"lineNum":"  371","line":"\t\t\t\t4"},
{"lineNum":"  372","line":"\t\t\t).expect(\"sizeof(u32) == 4\");"},
{"lineNum":"  373","line":"\t\t\tconverter.append(&fee_proportional_millionths)?;","class":"linePartCov","hits":"2","order":"5506","possible_hits":"3",},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"\t\t\tlet cltv_expiry_delta = try_stretch(","class":"lineCov","hits":"1","order":"5538","possible_hits":"1",},
{"lineNum":"  376","line":"\t\t\t\tencode_int_be_base256(hop.cltv_expiry_delta),","class":"lineCov","hits":"1","order":"5510","possible_hits":"1",},
{"lineNum":"  377","line":"\t\t\t\t2"},
{"lineNum":"  378","line":"\t\t\t).expect(\"sizeof(u16) == 2\");"},
{"lineNum":"  379","line":"\t\t\tconverter.append(&cltv_expiry_delta)?;","class":"linePartCov","hits":"2","order":"5540","possible_hits":"3",},
{"lineNum":"  380","line":"\t\t}","class":"linePartCov","hits":"1","order":"5544","possible_hits":"7",},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"\t\tconverter.finalize()?;","class":"lineCov","hits":"2","order":"5548","possible_hits":"2",},
{"lineNum":"  383","line":"\t\tOk(())","class":"lineCov","hits":"1","order":"5595","possible_hits":"1",},
{"lineNum":"  384","line":"\t}","class":"linePartCov","hits":"2","order":"5597","possible_hits":"3",},
{"lineNum":"  385","line":"}"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"impl Base32Len for Route {"},
{"lineNum":"  388","line":"\tfn base32_len(&self) -> usize {","class":"lineCov","hits":"1","order":"5373","possible_hits":"1",},
{"lineNum":"  389","line":"\t\tbytes_size_to_base32_size(self.0.len() * 51)","class":"linePartCov","hits":"1","order":"5374","possible_hits":"3",},
{"lineNum":"  390","line":"\t}","class":"lineCov","hits":"1","order":"5375","possible_hits":"1",},
{"lineNum":"  391","line":"}"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"impl ToBase32 for TaggedField {"},
{"lineNum":"  394","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {","class":"lineCov","hits":"1","order":"4146","possible_hits":"1",},
{"lineNum":"  395","line":"\t\t/// Writes a tagged field: tag, length and data. `tag` should be in `0..32` otherwise the"},
{"lineNum":"  396","line":"\t\t/// function will panic."},
{"lineNum":"  397","line":"\t\tfn write_tagged_field<W, P>(writer: &mut W, tag: u8, payload: &P) -> Result<(), W::Err>","class":"linePartCov","hits":"7","order":"4149","possible_hits":"14",},
{"lineNum":"  398","line":"\t\t\twhere W: WriteBase32,"},
{"lineNum":"  399","line":"\t\t\t\t  P: ToBase32 + Base32Len,"},
{"lineNum":"  400","line":"\t\t{"},
{"lineNum":"  401","line":"\t\t\tlet len = payload.base32_len();","class":"lineCov","hits":"7","order":"4150","possible_hits":"7",},
{"lineNum":"  402","line":"\t\t\tassert!(len < 1024, \"Every tagged field data can be at most 1023 bytes long.\");","class":"linePartCov","hits":"7","order":"4161","possible_hits":"14",},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"\t\t\twriter.write_u5(u5::try_from_u8(tag).expect(\"invalid tag, not in 0..32\"))?;","class":"linePartCov","hits":"14","order":"4162","possible_hits":"21",},
{"lineNum":"  405","line":"\t\t\twriter.write(&try_stretch(","class":"linePartCov","hits":"14","order":"4167","possible_hits":"21",},
{"lineNum":"  406","line":"\t\t\t\tencode_int_be_base32(len as u64),","class":"lineCov","hits":"7","order":"4166","possible_hits":"7",},
{"lineNum":"  407","line":"\t\t\t\t2"},
{"lineNum":"  408","line":"\t\t\t).expect(\"Can\'t be longer than 2, see assert above.\"))?;","class":"linePartCov","hits":"7","order":"4168","possible_hits":"21",},
{"lineNum":"  409","line":"\t\t\tpayload.write_base32(writer)","class":"lineCov","hits":"7","order":"4169","possible_hits":"7",},
{"lineNum":"  410","line":"\t\t}","class":"lineCov","hits":"14","order":"4194","possible_hits":"14",},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"\t\tmatch *self {","class":"linePartCov","hits":"7","order":"4195","possible_hits":"8",},
{"lineNum":"  413","line":"\t\t\tTaggedField::PaymentHash(ref hash) => {","class":"lineCov","hits":"2","order":"4147","possible_hits":"2",},
{"lineNum":"  414","line":"\t\t\t\twrite_tagged_field(writer, constants::TAG_PAYMENT_HASH, hash)","class":"lineCov","hits":"1","order":"4148","possible_hits":"1",},
{"lineNum":"  415","line":"\t\t\t},"},
{"lineNum":"  416","line":"\t\t\tTaggedField::Description(ref description) => {","class":"lineCov","hits":"1","order":"4198","possible_hits":"1",},
{"lineNum":"  417","line":"\t\t\t\twrite_tagged_field(writer, constants::TAG_DESCRIPTION, description)","class":"lineCov","hits":"1","order":"4199","possible_hits":"1",},
{"lineNum":"  418","line":"\t\t\t},"},
{"lineNum":"  419","line":"\t\t\tTaggedField::PayeePubKey(ref pub_key) => {","class":"lineCov","hits":"1","order":"5216","possible_hits":"1",},
{"lineNum":"  420","line":"\t\t\t\twrite_tagged_field(writer, constants::TAG_PAYEE_PUB_KEY, pub_key)","class":"lineCov","hits":"1","order":"5217","possible_hits":"1",},
{"lineNum":"  421","line":"\t\t\t},"},
{"lineNum":"  422","line":"\t\t\tTaggedField::DescriptionHash(ref hash) => {","class":"lineCov","hits":"1","order":"5600","possible_hits":"1",},
{"lineNum":"  423","line":"\t\t\t\twrite_tagged_field(writer, constants::TAG_DESCRIPTION_HASH, hash)","class":"lineCov","hits":"1","order":"5607","possible_hits":"1",},
{"lineNum":"  424","line":"\t\t\t},"},
{"lineNum":"  425","line":"\t\t\tTaggedField::ExpiryTime(ref duration) => {","class":"lineCov","hits":"1","order":"5319","possible_hits":"1",},
{"lineNum":"  426","line":"\t\t\t\twrite_tagged_field(writer, constants::TAG_EXPIRY_TIME, duration)","class":"lineCov","hits":"1","order":"5320","possible_hits":"1",},
{"lineNum":"  427","line":"\t\t\t},"},
{"lineNum":"  428","line":"\t\t\tTaggedField::MinFinalCltvExpiry(ref expiry) => {","class":"lineCov","hits":"1","order":"5351","possible_hits":"1",},
{"lineNum":"  429","line":"\t\t\t\twrite_tagged_field(writer, constants::TAG_MIN_FINAL_CLTV_EXPIRY, expiry)","class":"lineCov","hits":"1","order":"5352","possible_hits":"1",},
{"lineNum":"  430","line":"\t\t\t},"},
{"lineNum":"  431","line":"\t\t\tTaggedField::Fallback(ref fallback_address) => {","class":"lineCov","hits":"1","order":"5358","possible_hits":"1",},
{"lineNum":"  432","line":"\t\t\t\twrite_tagged_field(writer, constants::TAG_FALLBACK, fallback_address)","class":"lineCov","hits":"1","order":"5359","possible_hits":"1",},
{"lineNum":"  433","line":"\t\t\t},"},
{"lineNum":"  434","line":"\t\t\tTaggedField::Route(ref route_hops) => {","class":"lineCov","hits":"1","order":"5371","possible_hits":"1",},
{"lineNum":"  435","line":"\t\t\t\twrite_tagged_field(writer, constants::TAG_ROUTE, route_hops)","class":"lineCov","hits":"1","order":"5372","possible_hits":"1",},
{"lineNum":"  436","line":"\t\t\t},"},
{"lineNum":"  437","line":"\t\t}"},
{"lineNum":"  438","line":"\t}","class":"linePartCov","hits":"1","order":"4196","possible_hits":"2",},
{"lineNum":"  439","line":"}"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"impl ToBase32 for Signature {"},
{"lineNum":"  442","line":"\tfn write_base32<W: WriteBase32>(&self, writer: &mut W) -> Result<(), <W as WriteBase32>::Err> {"},
{"lineNum":"  443","line":"\t\tlet mut converter = BytesToBase32::new(writer);"},
{"lineNum":"  444","line":"\t\tlet (recovery_id, signature) = self.0.serialize_compact();"},
{"lineNum":"  445","line":"\t\tconverter.append(&signature[..])?;"},
{"lineNum":"  446","line":"\t\tconverter.append_u8(recovery_id.to_i32() as u8)?;"},
{"lineNum":"  447","line":"\t\tconverter.finalize()"},
{"lineNum":"  448","line":"\t}"},
{"lineNum":"  449","line":"}"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"#[cfg(test)]"},
{"lineNum":"  452","line":"mod test {"},
{"lineNum":"  453","line":"\tuse bech32::CheckBase32;"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"\t#[test]"},
{"lineNum":"  456","line":"\tfn test_currency_code() {","class":"linePartCov","hits":"3","order":"3079","possible_hits":"4",},
{"lineNum":"  457","line":"\t\tuse Currency;"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"\t\tassert_eq!(\"bc\", Currency::Bitcoin.to_string());","class":"lineCov","hits":"2","order":"3082","possible_hits":"2",},
{"lineNum":"  460","line":"\t\tassert_eq!(\"tb\", Currency::BitcoinTestnet.to_string());","class":"lineCov","hits":"1","order":"3170","possible_hits":"1",},
{"lineNum":"  461","line":"\t\tassert_eq!(\"bcrt\", Currency::Regtest.to_string());","class":"lineCov","hits":"1","order":"3172","possible_hits":"1",},
{"lineNum":"  462","line":"\t}","class":"linePartCov","hits":"2","order":"3174","possible_hits":"3",},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"\t#[test]"},
{"lineNum":"  465","line":"\tfn test_raw_hrp() {","class":"linePartCov","hits":"3","order":"3776","possible_hits":"4",},
{"lineNum":"  466","line":"\t\tuse ::{Currency, RawHrp, SiPrefix};"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"\t\tlet hrp = RawHrp {","class":"lineCov","hits":"1","order":"3785","possible_hits":"1",},
{"lineNum":"  469","line":"\t\t\tcurrency: Currency::Bitcoin,","class":"lineCov","hits":"1","order":"3779","possible_hits":"1",},
{"lineNum":"  470","line":"\t\t\traw_amount: Some(100),","class":"lineCov","hits":"1","order":"3781","possible_hits":"1",},
{"lineNum":"  471","line":"\t\t\tsi_prefix: Some(SiPrefix::Micro),","class":"lineCov","hits":"1","order":"3783","possible_hits":"1",},
{"lineNum":"  472","line":"\t\t};"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"\t\tassert_eq!(hrp.to_string(), \"lnbc100u\");","class":"lineCov","hits":"2","order":"3787","possible_hits":"2",},
{"lineNum":"  475","line":"\t}","class":"linePartCov","hits":"2","order":"3872","possible_hits":"3",},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"\t#[test]"},
{"lineNum":"  478","line":"\tfn test_encode_int_be_base32() {","class":"linePartCov","hits":"3","order":"3501","possible_hits":"4",},
{"lineNum":"  479","line":"\t\tuse ser::encode_int_be_base32;"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"\t\tlet input: u64 = 33764;","class":"lineCov","hits":"1","order":"3502","possible_hits":"1",},
{"lineNum":"  482","line":"\t\tlet expected_out = CheckBase32::check_base32(&[1, 0, 31, 4]).unwrap();","class":"lineCov","hits":"2","order":"3503","possible_hits":"2",},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"\t\tassert_eq!(expected_out, encode_int_be_base32(input));","class":"lineCov","hits":"2","order":"3528","possible_hits":"2",},
{"lineNum":"  485","line":"\t}","class":"linePartCov","hits":"2","order":"3549","possible_hits":"4",},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"\t#[test]"},
{"lineNum":"  488","line":"\tfn test_encode_int_be_base256() {","class":"linePartCov","hits":"3","order":"3308","possible_hits":"4",},
{"lineNum":"  489","line":"\t\tuse ser::encode_int_be_base256;"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"\t\tlet input: u64 = 16842530;","class":"lineCov","hits":"1","order":"3311","possible_hits":"1",},
{"lineNum":"  492","line":"\t\tlet expected_out = vec![1, 0, 255, 34];","class":"lineCov","hits":"1","order":"3312","possible_hits":"1",},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"\t\tassert_eq!(expected_out, encode_int_be_base256(input));","class":"lineCov","hits":"2","order":"3322","possible_hits":"2",},
{"lineNum":"  495","line":"\t}","class":"linePartCov","hits":"2","order":"3376","possible_hits":"4",},
{"lineNum":"  496","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-3332d6d4aab2c25c", "date" : "2020-05-23 13:12:48", "instrumented" : 246, "covered" : 227,};
var merged_data = [];
