var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin secp256k1 bindings"},
{"lineNum":"    2","line":"// Written in 2014 by"},
{"lineNum":"    3","line":"//   Dawid Ciężarkiewicz"},
{"lineNum":"    4","line":"//   Andrew Poelstra"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    7","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    8","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    9","line":"// any warranty."},
{"lineNum":"   10","line":"//"},
{"lineNum":"   11","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   12","line":"// along with this software."},
{"lineNum":"   13","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"//! # Secp256k1"},
{"lineNum":"   17","line":"//! Rust bindings for Pieter Wuille\'s secp256k1 library, which is used for"},
{"lineNum":"   18","line":"//! fast and accurate manipulation of ECDSA signatures on the secp256k1"},
{"lineNum":"   19","line":"//! curve. Such signatures are used extensively by the Bitcoin network"},
{"lineNum":"   20","line":"//! and its derivatives."},
{"lineNum":"   21","line":"//!"},
{"lineNum":"   22","line":"//! To minimize dependencies, some functions are feature-gated. To generate"},
{"lineNum":"   23","line":"//! random keys or to re-randomize a context object, compile with the \"rand\""},
{"lineNum":"   24","line":"//! feature. To de/serialize objects with serde, compile with \"serde\"."},
{"lineNum":"   25","line":"//!"},
{"lineNum":"   26","line":"//! Where possible, the bindings use the Rust type system to ensure that"},
{"lineNum":"   27","line":"//! API usage errors are impossible. For example, the library uses context"},
{"lineNum":"   28","line":"//! objects that contain precomputation tables which are created on object"},
{"lineNum":"   29","line":"//! construction. Since this is a slow operation (10+ milliseconds, vs ~50"},
{"lineNum":"   30","line":"//! microseconds for typical crypto operations, on a 2.70 Ghz i7-6820HQ)"},
{"lineNum":"   31","line":"//! the tables are optional, giving a performance boost for users who only"},
{"lineNum":"   32","line":"//! care about signing, only care about verification, or only care about"},
{"lineNum":"   33","line":"//! parsing. In the upstream library, if you attempt to sign a message using"},
{"lineNum":"   34","line":"//! a context that does not support this, it will trigger an assertion"},
{"lineNum":"   35","line":"//! failure and terminate the program. In `rust-secp256k1`, this is caught"},
{"lineNum":"   36","line":"//! at compile-time; in fact, it is impossible to compile code that will"},
{"lineNum":"   37","line":"//! trigger any assertion failures in the upstream library."},
{"lineNum":"   38","line":"//!"},
{"lineNum":"   39","line":"//! ```rust"},
{"lineNum":"   40","line":"//! extern crate secp256k1;"},
{"lineNum":"   41","line":"//! # #[cfg(feature=\"rand\")]"},
{"lineNum":"   42","line":"//! extern crate rand;"},
{"lineNum":"   43","line":"//!"},
{"lineNum":"   44","line":"//! #"},
{"lineNum":"   45","line":"//! # fn main() {"},
{"lineNum":"   46","line":"//! # #[cfg(feature=\"rand\")] {"},
{"lineNum":"   47","line":"//! use rand::OsRng;"},
{"lineNum":"   48","line":"//! use secp256k1::{Secp256k1, Message};"},
{"lineNum":"   49","line":"//!"},
{"lineNum":"   50","line":"//! let secp = Secp256k1::new();"},
{"lineNum":"   51","line":"//! let mut rng = OsRng::new().expect(\"OsRng\");"},
{"lineNum":"   52","line":"//! let (secret_key, public_key) = secp.generate_keypair(&mut rng);"},
{"lineNum":"   53","line":"//! let message = Message::from_slice(&[0xab; 32]).expect(\"32 bytes\");"},
{"lineNum":"   54","line":"//!"},
{"lineNum":"   55","line":"//! let sig = secp.sign(&message, &secret_key);"},
{"lineNum":"   56","line":"//! assert!(secp.verify(&message, &sig, &public_key).is_ok());"},
{"lineNum":"   57","line":"//! # } }"},
{"lineNum":"   58","line":"//! ```"},
{"lineNum":"   59","line":"//!"},
{"lineNum":"   60","line":"//! The above code requires `rust-secp256k1` to be compiled with the `rand`"},
{"lineNum":"   61","line":"//! feature enabled, to get access to [`generate_keypair`](struct.Secp256k1.html#method.generate_keypair)"},
{"lineNum":"   62","line":"//! Alternately, keys can be parsed from slices, like"},
{"lineNum":"   63","line":"//!"},
{"lineNum":"   64","line":"//! ```rust"},
{"lineNum":"   65","line":"//! # fn main() {"},
{"lineNum":"   66","line":"//! use self::secp256k1::{Secp256k1, Message, SecretKey, PublicKey};"},
{"lineNum":"   67","line":"//!"},
{"lineNum":"   68","line":"//! let secp = Secp256k1::new();"},
{"lineNum":"   69","line":"//! let secret_key = SecretKey::from_slice(&[0xcd; 32]).expect(\"32 bytes, within curve order\");"},
{"lineNum":"   70","line":"//! let public_key = PublicKey::from_secret_key(&secp, &secret_key);"},
{"lineNum":"   71","line":"//! let message = Message::from_slice(&[0xab; 32]).expect(\"32 bytes\");"},
{"lineNum":"   72","line":"//!"},
{"lineNum":"   73","line":"//! let sig = secp.sign(&message, &secret_key);"},
{"lineNum":"   74","line":"//! assert!(secp.verify(&message, &sig, &public_key).is_ok());"},
{"lineNum":"   75","line":"//! # }"},
{"lineNum":"   76","line":"//! ```"},
{"lineNum":"   77","line":"//!"},
{"lineNum":"   78","line":"//! Users who only want to verify signatures can use a cheaper context, like so:"},
{"lineNum":"   79","line":"//!"},
{"lineNum":"   80","line":"//! ```rust"},
{"lineNum":"   81","line":"//! # fn main() {"},
{"lineNum":"   82","line":"//! use secp256k1::{Secp256k1, Message, Signature, PublicKey};"},
{"lineNum":"   83","line":"//!"},
{"lineNum":"   84","line":"//! let secp = Secp256k1::verification_only();"},
{"lineNum":"   85","line":"//!"},
{"lineNum":"   86","line":"//! let public_key = PublicKey::from_slice(&["},
{"lineNum":"   87","line":"//!     0x02,"},
{"lineNum":"   88","line":"//!     0xc6, 0x6e, 0x7d, 0x89, 0x66, 0xb5, 0xc5, 0x55,"},
{"lineNum":"   89","line":"//!     0xaf, 0x58, 0x05, 0x98, 0x9d, 0xa9, 0xfb, 0xf8,"},
{"lineNum":"   90","line":"//!     0xdb, 0x95, 0xe1, 0x56, 0x31, 0xce, 0x35, 0x8c,"},
{"lineNum":"   91","line":"//!     0x3a, 0x17, 0x10, 0xc9, 0x62, 0x67, 0x90, 0x63,"},
{"lineNum":"   92","line":"//! ]).expect(\"public keys must be 33 or 65 bytes, serialized according to SEC 2\");"},
{"lineNum":"   93","line":"//!"},
{"lineNum":"   94","line":"//! let message = Message::from_slice(&["},
{"lineNum":"   95","line":"//!     0xaa, 0xdf, 0x7d, 0xe7, 0x82, 0x03, 0x4f, 0xbe,"},
{"lineNum":"   96","line":"//!     0x3d, 0x3d, 0xb2, 0xcb, 0x13, 0xc0, 0xcd, 0x91,"},
{"lineNum":"   97","line":"//!     0xbf, 0x41, 0xcb, 0x08, 0xfa, 0xc7, 0xbd, 0x61,"},
{"lineNum":"   98","line":"//!     0xd5, 0x44, 0x53, 0xcf, 0x6e, 0x82, 0xb4, 0x50,"},
{"lineNum":"   99","line":"//! ]).expect(\"messages must be 32 bytes and are expected to be hashes\");"},
{"lineNum":"  100","line":"//!"},
{"lineNum":"  101","line":"//! let sig = Signature::from_compact(&["},
{"lineNum":"  102","line":"//!     0xdc, 0x4d, 0xc2, 0x64, 0xa9, 0xfe, 0xf1, 0x7a,"},
{"lineNum":"  103","line":"//!     0x3f, 0x25, 0x34, 0x49, 0xcf, 0x8c, 0x39, 0x7a,"},
{"lineNum":"  104","line":"//!     0xb6, 0xf1, 0x6f, 0xb3, 0xd6, 0x3d, 0x86, 0x94,"},
{"lineNum":"  105","line":"//!     0x0b, 0x55, 0x86, 0x82, 0x3d, 0xfd, 0x02, 0xae,"},
{"lineNum":"  106","line":"//!     0x3b, 0x46, 0x1b, 0xb4, 0x33, 0x6b, 0x5e, 0xcb,"},
{"lineNum":"  107","line":"//!     0xae, 0xfd, 0x66, 0x27, 0xaa, 0x92, 0x2e, 0xfc,"},
{"lineNum":"  108","line":"//!     0x04, 0x8f, 0xec, 0x0c, 0x88, 0x1c, 0x10, 0xc4,"},
{"lineNum":"  109","line":"//!     0xc9, 0x42, 0x8f, 0xca, 0x69, 0xc1, 0x32, 0xa2,"},
{"lineNum":"  110","line":"//! ]).expect(\"compact signatures are 64 bytes; DER signatures are 68-72 bytes\");"},
{"lineNum":"  111","line":"//!"},
{"lineNum":"  112","line":"//! assert!(secp.verify(&message, &sig, &public_key).is_ok());"},
{"lineNum":"  113","line":"//! # }"},
{"lineNum":"  114","line":"//! ```"},
{"lineNum":"  115","line":"//!"},
{"lineNum":"  116","line":"//! Observe that the same code using, say [`signing_only`](struct.Secp256k1.html#method.signing_only)"},
{"lineNum":"  117","line":"//! to generate a context would simply not compile."},
{"lineNum":"  118","line":"//!"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"#![crate_type = \"lib\"]"},
{"lineNum":"  121","line":"#![crate_type = \"rlib\"]"},
{"lineNum":"  122","line":"#![crate_type = \"dylib\"]"},
{"lineNum":"  123","line":"#![crate_name = \"secp256k1\"]"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"// Coding conventions"},
{"lineNum":"  126","line":"#![deny(non_upper_case_globals)]"},
{"lineNum":"  127","line":"#![deny(non_camel_case_types)]"},
{"lineNum":"  128","line":"#![deny(non_snake_case)]"},
{"lineNum":"  129","line":"#![deny(unused_mut)]"},
{"lineNum":"  130","line":"#![warn(missing_docs)]"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"#![cfg_attr(feature = \"dev\", allow(unstable_features))]"},
{"lineNum":"  133","line":"#![cfg_attr(feature = \"dev\", feature(plugin))]"},
{"lineNum":"  134","line":"#![cfg_attr(feature = \"dev\", plugin(clippy))]"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"#![cfg_attr(all(not(test), not(fuzztarget), not(feature = \"std\")), no_std)]"},
{"lineNum":"  137","line":"#![cfg_attr(all(test, feature = \"unstable\"), feature(test))]"},
{"lineNum":"  138","line":"#[cfg(all(test, feature = \"unstable\"))] extern crate test;"},
{"lineNum":"  139","line":"#[cfg(any(test, feature = \"rand\"))] pub extern crate rand;"},
{"lineNum":"  140","line":"#[cfg(any(test))] extern crate rand_core;"},
{"lineNum":"  141","line":"#[cfg(feature = \"serde\")] pub extern crate serde;"},
{"lineNum":"  142","line":"#[cfg(all(test, feature = \"serde\"))] extern crate serde_test;"},
{"lineNum":"  143","line":"#[cfg(any(test, feature = \"rand\"))] use rand::Rng;"},
{"lineNum":"  144","line":"#[cfg(any(test, feature = \"std\"))] extern crate core;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"use core::{fmt, ptr, str};"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"#[macro_use]"},
{"lineNum":"  149","line":"mod macros;"},
{"lineNum":"  150","line":"mod types;"},
{"lineNum":"  151","line":"mod context;"},
{"lineNum":"  152","line":"pub mod constants;"},
{"lineNum":"  153","line":"pub mod ecdh;"},
{"lineNum":"  154","line":"pub mod ffi;"},
{"lineNum":"  155","line":"pub mod key;"},
{"lineNum":"  156","line":"#[cfg(feature = \"recovery\")]"},
{"lineNum":"  157","line":"pub mod recovery;"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"pub use key::SecretKey;"},
{"lineNum":"  160","line":"pub use key::PublicKey;"},
{"lineNum":"  161","line":"pub use context::*;"},
{"lineNum":"  162","line":"use core::marker::PhantomData;"},
{"lineNum":"  163","line":"use core::ops::Deref;"},
{"lineNum":"  164","line":"use ffi::CPtr;"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"/// An ECDSA signature"},
{"lineNum":"  167","line":"#[derive(Copy, Clone, PartialEq, Eq)]"},
{"lineNum":"  168","line":"pub struct Signature(ffi::Signature);"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"/// A DER serialized Signature"},
{"lineNum":"  171","line":"#[derive(Copy, Clone)]"},
{"lineNum":"  172","line":"pub struct SerializedSignature {"},
{"lineNum":"  173","line":"    data: [u8; 72],"},
{"lineNum":"  174","line":"    len: usize,"},
{"lineNum":"  175","line":"}"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"impl fmt::Debug for Signature {"},
{"lineNum":"  178","line":"fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  179","line":"    fmt::Display::fmt(self, f)"},
{"lineNum":"  180","line":"}"},
{"lineNum":"  181","line":"}"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"impl fmt::Display for Signature {"},
{"lineNum":"  184","line":"fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  185","line":"    let sig = self.serialize_der();"},
{"lineNum":"  186","line":"    for v in sig.iter() {"},
{"lineNum":"  187","line":"        write!(f, \"{:02x}\", v)?;"},
{"lineNum":"  188","line":"    }"},
{"lineNum":"  189","line":"    Ok(())"},
{"lineNum":"  190","line":"}"},
{"lineNum":"  191","line":"}"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"impl str::FromStr for Signature {"},
{"lineNum":"  194","line":"type Err = Error;"},
{"lineNum":"  195","line":"fn from_str(s: &str) -> Result<Signature, Error> {"},
{"lineNum":"  196","line":"    let mut res = [0; 72];"},
{"lineNum":"  197","line":"    match from_hex(s, &mut res) {"},
{"lineNum":"  198","line":"        Ok(x) => Signature::from_der(&res[0..x]),"},
{"lineNum":"  199","line":"        _ => Err(Error::InvalidSignature),"},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":"}"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"/// Trait describing something that promises to be a 32-byte random number; in particular,"},
{"lineNum":"  205","line":"/// it has negligible probability of being zero or overflowing the group order. Such objects"},
{"lineNum":"  206","line":"/// may be converted to `Message`s without any error paths."},
{"lineNum":"  207","line":"pub trait ThirtyTwoByteHash {"},
{"lineNum":"  208","line":"    /// Converts the object into a 32-byte array"},
{"lineNum":"  209","line":"    fn into_32(self) -> [u8; 32];"},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"impl SerializedSignature {"},
{"lineNum":"  213","line":"    /// Get a pointer to the underlying data with the specified capacity."},
{"lineNum":"  214","line":"    pub(crate) fn get_data_mut_ptr(&mut self) -> *mut u8 {"},
{"lineNum":"  215","line":"        self.data.as_mut_ptr()"},
{"lineNum":"  216","line":"    }"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    /// Get the capacity of the underlying data buffer."},
{"lineNum":"  219","line":"    pub fn capacity(&self) -> usize {"},
{"lineNum":"  220","line":"        self.data.len()"},
{"lineNum":"  221","line":"    }"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    /// Get the len of the used data."},
{"lineNum":"  224","line":"    pub fn len(&self) -> usize {"},
{"lineNum":"  225","line":"        self.len"},
{"lineNum":"  226","line":"    }"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    /// Set the length of the object."},
{"lineNum":"  229","line":"    pub(crate) fn set_len(&mut self, len: usize) {"},
{"lineNum":"  230","line":"        self.len = len;"},
{"lineNum":"  231","line":"    }"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    /// Convert the serialized signature into the Signature struct."},
{"lineNum":"  234","line":"    /// (This DER deserializes it)"},
{"lineNum":"  235","line":"    pub fn to_signature(&self) -> Result<Signature, Error> {"},
{"lineNum":"  236","line":"        Signature::from_der(&self)"},
{"lineNum":"  237","line":"    }"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    /// Create a SerializedSignature from a Signature."},
{"lineNum":"  240","line":"    /// (this DER serializes it)"},
{"lineNum":"  241","line":"    pub fn from_signature(sig: &Signature) -> SerializedSignature {"},
{"lineNum":"  242","line":"        sig.serialize_der()"},
{"lineNum":"  243","line":"    }"},
{"lineNum":"  244","line":"}"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"impl Signature {"},
{"lineNum":"  247","line":"#[inline]"},
{"lineNum":"  248","line":"    /// Converts a DER-encoded byte slice to a signature"},
{"lineNum":"  249","line":"    pub fn from_der(data: &[u8]) -> Result<Signature, Error> {"},
{"lineNum":"  250","line":"        if data.is_empty() {return Err(Error::InvalidSignature);}"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"        let mut ret = ffi::Signature::new();"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"        unsafe {"},
{"lineNum":"  255","line":"            if ffi::secp256k1_ecdsa_signature_parse_der("},
{"lineNum":"  256","line":"                ffi::secp256k1_context_no_precomp,"},
{"lineNum":"  257","line":"                &mut ret,"},
{"lineNum":"  258","line":"                data.as_c_ptr(),"},
{"lineNum":"  259","line":"                data.len() as usize,"},
{"lineNum":"  260","line":"            ) == 1"},
{"lineNum":"  261","line":"            {"},
{"lineNum":"  262","line":"                Ok(Signature(ret))"},
{"lineNum":"  263","line":"            } else {"},
{"lineNum":"  264","line":"                Err(Error::InvalidSignature)"},
{"lineNum":"  265","line":"            }"},
{"lineNum":"  266","line":"        }"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"    /// Converts a 64-byte compact-encoded byte slice to a signature"},
{"lineNum":"  270","line":"    pub fn from_compact(data: &[u8]) -> Result<Signature, Error> {"},
{"lineNum":"  271","line":"        let mut ret = ffi::Signature::new();"},
{"lineNum":"  272","line":"        if data.len() != 64 {"},
{"lineNum":"  273","line":"            return Err(Error::InvalidSignature)"},
{"lineNum":"  274","line":"        }"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        unsafe {"},
{"lineNum":"  277","line":"            if ffi::secp256k1_ecdsa_signature_parse_compact("},
{"lineNum":"  278","line":"                ffi::secp256k1_context_no_precomp,"},
{"lineNum":"  279","line":"                &mut ret,"},
{"lineNum":"  280","line":"                data.as_c_ptr(),"},
{"lineNum":"  281","line":"            ) == 1"},
{"lineNum":"  282","line":"            {"},
{"lineNum":"  283","line":"                Ok(Signature(ret))"},
{"lineNum":"  284","line":"            } else {"},
{"lineNum":"  285","line":"                Err(Error::InvalidSignature)"},
{"lineNum":"  286","line":"            }"},
{"lineNum":"  287","line":"        }"},
{"lineNum":"  288","line":"    }"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    /// Converts a \"lax DER\"-encoded byte slice to a signature. This is basically"},
{"lineNum":"  291","line":"    /// only useful for validating signatures in the Bitcoin blockchain from before"},
{"lineNum":"  292","line":"    /// 2016. It should never be used in new applications. This library does not"},
{"lineNum":"  293","line":"    /// support serializing to this \"format\""},
{"lineNum":"  294","line":"    pub fn from_der_lax(data: &[u8]) -> Result<Signature, Error> {"},
{"lineNum":"  295","line":"        if data.is_empty() {return Err(Error::InvalidSignature);}"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"        unsafe {"},
{"lineNum":"  298","line":"            let mut ret = ffi::Signature::new();"},
{"lineNum":"  299","line":"            if ffi::ecdsa_signature_parse_der_lax("},
{"lineNum":"  300","line":"                ffi::secp256k1_context_no_precomp,"},
{"lineNum":"  301","line":"                &mut ret,"},
{"lineNum":"  302","line":"                data.as_c_ptr(),"},
{"lineNum":"  303","line":"                data.len() as usize,"},
{"lineNum":"  304","line":"            ) == 1"},
{"lineNum":"  305","line":"            {"},
{"lineNum":"  306","line":"                Ok(Signature(ret))"},
{"lineNum":"  307","line":"            } else {"},
{"lineNum":"  308","line":"                Err(Error::InvalidSignature)"},
{"lineNum":"  309","line":"            }"},
{"lineNum":"  310","line":"        }"},
{"lineNum":"  311","line":"    }"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    /// Normalizes a signature to a \"low S\" form. In ECDSA, signatures are"},
{"lineNum":"  314","line":"    /// of the form (r, s) where r and s are numbers lying in some finite"},
{"lineNum":"  315","line":"    /// field. The verification equation will pass for (r, s) iff it passes"},
{"lineNum":"  316","line":"    /// for (r, -s), so it is possible to ``modify\'\' signatures in transit"},
{"lineNum":"  317","line":"    /// by flipping the sign of s. This does not constitute a forgery since"},
{"lineNum":"  318","line":"    /// the signed message still cannot be changed, but for some applications,"},
{"lineNum":"  319","line":"    /// changing even the signature itself can be a problem. Such applications"},
{"lineNum":"  320","line":"    /// require a \"strong signature\". It is believed that ECDSA is a strong"},
{"lineNum":"  321","line":"    /// signature except for this ambiguity in the sign of s, so to accommodate"},
{"lineNum":"  322","line":"    /// these applications libsecp256k1 will only accept signatures for which"},
{"lineNum":"  323","line":"    /// s is in the lower half of the field range. This eliminates the"},
{"lineNum":"  324","line":"    /// ambiguity."},
{"lineNum":"  325","line":"    ///"},
{"lineNum":"  326","line":"    /// However, for some systems, signatures with high s-values are considered"},
{"lineNum":"  327","line":"    /// valid. (For example, parsing the historic Bitcoin blockchain requires"},
{"lineNum":"  328","line":"    /// this.) For these applications we provide this normalization function,"},
{"lineNum":"  329","line":"    /// which ensures that the s value lies in the lower half of its range."},
{"lineNum":"  330","line":"    pub fn normalize_s(&mut self) {"},
{"lineNum":"  331","line":"        unsafe {"},
{"lineNum":"  332","line":"            // Ignore return value, which indicates whether the sig"},
{"lineNum":"  333","line":"            // was already normalized. We don\'t care."},
{"lineNum":"  334","line":"            ffi::secp256k1_ecdsa_signature_normalize("},
{"lineNum":"  335","line":"                ffi::secp256k1_context_no_precomp,"},
{"lineNum":"  336","line":"                self.as_mut_c_ptr(),"},
{"lineNum":"  337","line":"                self.as_c_ptr(),"},
{"lineNum":"  338","line":"            );"},
{"lineNum":"  339","line":"        }"},
{"lineNum":"  340","line":"    }"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"    /// Obtains a raw pointer suitable for use with FFI functions"},
{"lineNum":"  343","line":"    #[inline]"},
{"lineNum":"  344","line":"    pub fn as_ptr(&self) -> *const ffi::Signature {","class":"lineCov","hits":"1","order":"6083","possible_hits":"1",},
{"lineNum":"  345","line":"        &self.0 as *const _"},
{"lineNum":"  346","line":"    }","class":"linePartCov","hits":"1","order":"6084","possible_hits":"2",},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    /// Obtains a raw mutable pointer suitable for use with FFI functions"},
{"lineNum":"  349","line":"    #[inline]"},
{"lineNum":"  350","line":"    pub fn as_mut_ptr(&mut self) -> *mut ffi::Signature {"},
{"lineNum":"  351","line":"        &mut self.0 as *mut _"},
{"lineNum":"  352","line":"    }"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    #[inline]"},
{"lineNum":"  355","line":"    /// Serializes the signature in DER format"},
{"lineNum":"  356","line":"    pub fn serialize_der(&self) -> SerializedSignature {"},
{"lineNum":"  357","line":"        let mut ret = SerializedSignature::default();"},
{"lineNum":"  358","line":"        let mut len: usize = ret.capacity();"},
{"lineNum":"  359","line":"        unsafe {"},
{"lineNum":"  360","line":"            let err = ffi::secp256k1_ecdsa_signature_serialize_der("},
{"lineNum":"  361","line":"                ffi::secp256k1_context_no_precomp,"},
{"lineNum":"  362","line":"                ret.get_data_mut_ptr(),"},
{"lineNum":"  363","line":"                &mut len,"},
{"lineNum":"  364","line":"                self.as_c_ptr(),"},
{"lineNum":"  365","line":"            );"},
{"lineNum":"  366","line":"            debug_assert!(err == 1);"},
{"lineNum":"  367","line":"            ret.set_len(len);"},
{"lineNum":"  368","line":"        }"},
{"lineNum":"  369","line":"        ret"},
{"lineNum":"  370","line":"    }"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"    #[inline]"},
{"lineNum":"  373","line":"    /// Serializes the signature in compact format"},
{"lineNum":"  374","line":"    pub fn serialize_compact(&self) -> [u8; 64] {"},
{"lineNum":"  375","line":"        let mut ret = [0; 64];"},
{"lineNum":"  376","line":"        unsafe {"},
{"lineNum":"  377","line":"            let err = ffi::secp256k1_ecdsa_signature_serialize_compact("},
{"lineNum":"  378","line":"                ffi::secp256k1_context_no_precomp,"},
{"lineNum":"  379","line":"                ret.as_mut_c_ptr(),"},
{"lineNum":"  380","line":"                self.as_c_ptr(),"},
{"lineNum":"  381","line":"            );"},
{"lineNum":"  382","line":"            debug_assert!(err == 1);"},
{"lineNum":"  383","line":"        }"},
{"lineNum":"  384","line":"        ret"},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":"}"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"impl CPtr for Signature {"},
{"lineNum":"  389","line":"    type Target = ffi::Signature;"},
{"lineNum":"  390","line":"    fn as_c_ptr(&self) -> *const Self::Target {","class":"lineCov","hits":"1","order":"6081","possible_hits":"1",},
{"lineNum":"  391","line":"        self.as_ptr()","class":"lineCov","hits":"1","order":"6082","possible_hits":"1",},
{"lineNum":"  392","line":"    }","class":"linePartCov","hits":"1","order":"6085","possible_hits":"2",},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"    fn as_mut_c_ptr(&mut self) -> *mut Self::Target {"},
{"lineNum":"  395","line":"        self.as_mut_ptr()"},
{"lineNum":"  396","line":"    }"},
{"lineNum":"  397","line":"}"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"/// Creates a new signature from a FFI signature"},
{"lineNum":"  400","line":"impl From<ffi::Signature> for Signature {"},
{"lineNum":"  401","line":"    #[inline]"},
{"lineNum":"  402","line":"    fn from(sig: ffi::Signature) -> Signature {"},
{"lineNum":"  403","line":"        Signature(sig)"},
{"lineNum":"  404","line":"    }"},
{"lineNum":"  405","line":"}"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"#[cfg(feature = \"serde\")]"},
{"lineNum":"  409","line":"impl ::serde::Serialize for Signature {"},
{"lineNum":"  410","line":"    fn serialize<S: ::serde::Serializer>(&self, s: S) -> Result<S::Ok, S::Error> {"},
{"lineNum":"  411","line":"        if s.is_human_readable() {"},
{"lineNum":"  412","line":"            s.collect_str(self)"},
{"lineNum":"  413","line":"        } else {"},
{"lineNum":"  414","line":"            s.serialize_bytes(&self.serialize_der())"},
{"lineNum":"  415","line":"        }"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"    }"},
{"lineNum":"  418","line":"}"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"#[cfg(feature = \"serde\")]"},
{"lineNum":"  421","line":"impl<\'de> ::serde::Deserialize<\'de> for Signature {"},
{"lineNum":"  422","line":"    fn deserialize<D: ::serde::Deserializer<\'de>>(d: D) -> Result<Signature, D::Error> {"},
{"lineNum":"  423","line":"        use ::serde::de::Error;"},
{"lineNum":"  424","line":"        use str::FromStr;"},
{"lineNum":"  425","line":"        if d.is_human_readable() {"},
{"lineNum":"  426","line":"            let sl: &str = ::serde::Deserialize::deserialize(d)?;"},
{"lineNum":"  427","line":"            Signature::from_str(sl).map_err(D::Error::custom)"},
{"lineNum":"  428","line":"        } else {"},
{"lineNum":"  429","line":"            let sl: &[u8] = ::serde::Deserialize::deserialize(d)?;"},
{"lineNum":"  430","line":"            Signature::from_der(sl).map_err(D::Error::custom)"},
{"lineNum":"  431","line":"        }"},
{"lineNum":"  432","line":"    }"},
{"lineNum":"  433","line":"}"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"/// A (hashed) message input to an ECDSA signature"},
{"lineNum":"  436","line":"pub struct Message([u8; constants::MESSAGE_SIZE]);"},
{"lineNum":"  437","line":"impl_array_newtype!(Message, u8, constants::MESSAGE_SIZE);"},
{"lineNum":"  438","line":"impl_pretty_debug!(Message);"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"impl Message {"},
{"lineNum":"  441","line":"    /// Converts a `MESSAGE_SIZE`-byte slice to a message object"},
{"lineNum":"  442","line":"    #[inline]"},
{"lineNum":"  443","line":"    pub fn from_slice(data: &[u8]) -> Result<Message, Error> {","class":"lineCov","hits":"1","order":"4230","possible_hits":"1",},
{"lineNum":"  444","line":"        if data == [0; constants::MESSAGE_SIZE] {","class":"lineCov","hits":"1","order":"4231","possible_hits":"1",},
{"lineNum":"  445","line":"            return Err(Error::InvalidMessage);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  446","line":"        }"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"        match data.len() {","class":"linePartCov","hits":"1","order":"4235","possible_hits":"2",},
{"lineNum":"  449","line":"            constants::MESSAGE_SIZE => {","class":"lineCov","hits":"1","order":"4236","possible_hits":"1",},
{"lineNum":"  450","line":"                let mut ret = [0; constants::MESSAGE_SIZE];","class":"lineCov","hits":"1","order":"4237","possible_hits":"1",},
{"lineNum":"  451","line":"                ret[..].copy_from_slice(data);","class":"lineCov","hits":"1","order":"4238","possible_hits":"1",},
{"lineNum":"  452","line":"                Ok(Message(ret))","class":"lineCov","hits":"1","order":"4239","possible_hits":"1",},
{"lineNum":"  453","line":"            }"},
{"lineNum":"  454","line":"            _ => Err(Error::InvalidMessage)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  455","line":"        }"},
{"lineNum":"  456","line":"    }","class":"linePartCov","hits":"2","order":"4240","possible_hits":"3",},
{"lineNum":"  457","line":"}"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"impl<T: ThirtyTwoByteHash> From<T> for Message {"},
{"lineNum":"  460","line":"    /// Converts a 32-byte hash directly to a message without error paths"},
{"lineNum":"  461","line":"    fn from(t: T) -> Message {"},
{"lineNum":"  462","line":"        Message(t.into_32())"},
{"lineNum":"  463","line":"    }"},
{"lineNum":"  464","line":"}"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"/// An ECDSA error"},
{"lineNum":"  467","line":"#[derive(Copy, PartialEq, Eq, Clone, Debug)]","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  468","line":"pub enum Error {"},
{"lineNum":"  469","line":"    /// Signature failed verification"},
{"lineNum":"  470","line":"    IncorrectSignature,"},
{"lineNum":"  471","line":"    /// Badly sized message (\"messages\" are actually fixed-sized digests; see the `MESSAGE_SIZE`"},
{"lineNum":"  472","line":"    /// constant)"},
{"lineNum":"  473","line":"    InvalidMessage,"},
{"lineNum":"  474","line":"    /// Bad public key"},
{"lineNum":"  475","line":"    InvalidPublicKey,"},
{"lineNum":"  476","line":"    /// Bad signature"},
{"lineNum":"  477","line":"    InvalidSignature,"},
{"lineNum":"  478","line":"    /// Bad secret key"},
{"lineNum":"  479","line":"    InvalidSecretKey,"},
{"lineNum":"  480","line":"    /// Bad recovery id"},
{"lineNum":"  481","line":"    InvalidRecoveryId,"},
{"lineNum":"  482","line":"    /// Invalid tweak for add_*_assign or mul_*_assign"},
{"lineNum":"  483","line":"    InvalidTweak,"},
{"lineNum":"  484","line":"    /// Didn\'t pass enough memory to context creation with preallocated memory"},
{"lineNum":"  485","line":"    NotEnoughMemory,"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"}"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"impl Error {"},
{"lineNum":"  490","line":"    fn as_str(&self) -> &str {"},
{"lineNum":"  491","line":"        match *self {"},
{"lineNum":"  492","line":"            Error::IncorrectSignature => \"secp: signature failed verification\","},
{"lineNum":"  493","line":"            Error::InvalidMessage => \"secp: message was not 32 bytes (do you need to hash?)\","},
{"lineNum":"  494","line":"            Error::InvalidPublicKey => \"secp: malformed public key\","},
{"lineNum":"  495","line":"            Error::InvalidSignature => \"secp: malformed signature\","},
{"lineNum":"  496","line":"            Error::InvalidSecretKey => \"secp: malformed or out-of-range secret key\","},
{"lineNum":"  497","line":"            Error::InvalidRecoveryId => \"secp: bad recovery id\","},
{"lineNum":"  498","line":"            Error::InvalidTweak => \"secp: bad tweak\","},
{"lineNum":"  499","line":"            Error::NotEnoughMemory => \"secp: not enough memory allocated\","},
{"lineNum":"  500","line":"        }"},
{"lineNum":"  501","line":"    }"},
{"lineNum":"  502","line":"}"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"// Passthrough Debug to Display, since errors should be user-visible"},
{"lineNum":"  505","line":"impl fmt::Display for Error {"},
{"lineNum":"  506","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {"},
{"lineNum":"  507","line":"        f.write_str(self.as_str())"},
{"lineNum":"  508","line":"    }"},
{"lineNum":"  509","line":"}"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"#[cfg(feature = \"std\")]"},
{"lineNum":"  512","line":"impl std::error::Error for Error {"},
{"lineNum":"  513","line":"    fn description(&self) -> &str { self.as_str() }"},
{"lineNum":"  514","line":"}"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"/// The secp256k1 engine, used to execute all signature operations"},
{"lineNum":"  518","line":"pub struct Secp256k1<C: Context> {"},
{"lineNum":"  519","line":"    ctx: *mut ffi::Context,"},
{"lineNum":"  520","line":"    phantom: PhantomData<C>,"},
{"lineNum":"  521","line":"    buf: *mut [u8],"},
{"lineNum":"  522","line":"}"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"// The underlying secp context does not contain any references to memory it does not own"},
{"lineNum":"  525","line":"unsafe impl<C: Context> Send for Secp256k1<C> {}"},
{"lineNum":"  526","line":"// The API does not permit any mutation of `Secp256k1` objects except through `&mut` references"},
{"lineNum":"  527","line":"unsafe impl<C: Context> Sync for Secp256k1<C> {}"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"impl<C: Context> PartialEq for Secp256k1<C> {"},
{"lineNum":"  531","line":"    fn eq(&self, _other: &Secp256k1<C>) -> bool { true }"},
{"lineNum":"  532","line":"}"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"impl Default for SerializedSignature {"},
{"lineNum":"  535","line":"    fn default() -> SerializedSignature {"},
{"lineNum":"  536","line":"        SerializedSignature {"},
{"lineNum":"  537","line":"            data: [0u8; 72],"},
{"lineNum":"  538","line":"            len: 0,"},
{"lineNum":"  539","line":"        }"},
{"lineNum":"  540","line":"    }"},
{"lineNum":"  541","line":"}"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"impl PartialEq for SerializedSignature {"},
{"lineNum":"  544","line":"    fn eq(&self, other: &SerializedSignature) -> bool {"},
{"lineNum":"  545","line":"        &self.data[..self.len] == &other.data[..other.len]"},
{"lineNum":"  546","line":"    }"},
{"lineNum":"  547","line":"}"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"impl AsRef<[u8]> for SerializedSignature {"},
{"lineNum":"  550","line":"    fn as_ref(&self) -> &[u8] {"},
{"lineNum":"  551","line":"        &self.data[..self.len]"},
{"lineNum":"  552","line":"    }"},
{"lineNum":"  553","line":"}"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"impl Deref for SerializedSignature {"},
{"lineNum":"  556","line":"    type Target = [u8];"},
{"lineNum":"  557","line":"    fn deref(&self) -> &[u8] {"},
{"lineNum":"  558","line":"        &self.data[..self.len]"},
{"lineNum":"  559","line":"    }"},
{"lineNum":"  560","line":"}"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"impl Eq for SerializedSignature {}"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"impl<C: Context> Eq for Secp256k1<C> { }"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"impl<C: Context> Drop for Secp256k1<C> {"},
{"lineNum":"  567","line":"    fn drop(&mut self) {","class":"lineCov","hits":"1","order":"5999","possible_hits":"1",},
{"lineNum":"  568","line":"        unsafe { ffi::secp256k1_context_preallocated_destroy(self.ctx) };","class":"lineCov","hits":"1","order":"6000","possible_hits":"1",},
{"lineNum":"  569","line":"        C::deallocate(self.buf);","class":"lineCov","hits":"1","order":"6015","possible_hits":"1",},
{"lineNum":"  570","line":"    }","class":"linePartCov","hits":"1","order":"6029","possible_hits":"2",},
{"lineNum":"  571","line":"}"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"impl<C: Context> fmt::Debug for Secp256k1<C> {"},
{"lineNum":"  574","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  575","line":"        write!(f, \"<secp256k1 context {:?}, {}>\", self.ctx, C::DESCRIPTION)"},
{"lineNum":"  576","line":"    }"},
{"lineNum":"  577","line":"}"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"impl<C: Context> Secp256k1<C> {"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    /// Getter for the raw pointer to the underlying secp256k1 context. This"},
{"lineNum":"  582","line":"    /// shouldn\'t be needed with normal usage of the library. It enables"},
{"lineNum":"  583","line":"    /// extending the Secp256k1 with more cryptographic algorithms outside of"},
{"lineNum":"  584","line":"    /// this crate."},
{"lineNum":"  585","line":"    pub fn ctx(&self) -> &*mut ffi::Context {"},
{"lineNum":"  586","line":"        &self.ctx"},
{"lineNum":"  587","line":"    }"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"    /// Returns the required memory for a preallocated context buffer in a generic manner(sign/verify/all)"},
{"lineNum":"  590","line":"    pub fn preallocate_size_gen() -> usize {","class":"lineCov","hits":"1","order":"4289","possible_hits":"1",},
{"lineNum":"  591","line":"        unsafe { ffi::secp256k1_context_preallocated_size(C::FLAGS) }","class":"lineCov","hits":"1","order":"4290","possible_hits":"1",},
{"lineNum":"  592","line":"    }","class":"linePartCov","hits":"1","order":"4300","possible_hits":"2",},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"    /// (Re)randomizes the Secp256k1 context for cheap sidechannel resistance;"},
{"lineNum":"  595","line":"    /// see comment in libsecp256k1 commit d2275795f by Gregory Maxwell. Requires"},
{"lineNum":"  596","line":"    /// compilation with \"rand\" feature."},
{"lineNum":"  597","line":"    #[cfg(any(test, feature = \"rand\"))]"},
{"lineNum":"  598","line":"    pub fn randomize<R: Rng + ?Sized>(&mut self, rng: &mut R) {"},
{"lineNum":"  599","line":"        let mut seed = [0; 32];"},
{"lineNum":"  600","line":"        rng.fill_bytes(&mut seed);"},
{"lineNum":"  601","line":"        unsafe {"},
{"lineNum":"  602","line":"            let err = ffi::secp256k1_context_randomize(self.ctx, seed.as_c_ptr());"},
{"lineNum":"  603","line":"            // This function cannot fail; it has an error return for future-proofing."},
{"lineNum":"  604","line":"            // We do not expose this error since it is impossible to hit, and we have"},
{"lineNum":"  605","line":"            // precedent for not exposing impossible errors (for example in"},
{"lineNum":"  606","line":"            // `PublicKey::from_secret_key` where it is impossible to create an invalid"},
{"lineNum":"  607","line":"            // secret key through the API.)"},
{"lineNum":"  608","line":"            // However, if this DOES fail, the result is potentially weaker side-channel"},
{"lineNum":"  609","line":"            // resistance, which is deadly and undetectable, so we take out the entire"},
{"lineNum":"  610","line":"            // thread to be on the safe side."},
{"lineNum":"  611","line":"            assert!(err == 1);"},
{"lineNum":"  612","line":"        }"},
{"lineNum":"  613","line":"    }"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"}"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"impl<C: Signing> Secp256k1<C> {"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"    /// Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce"},
{"lineNum":"  620","line":"    /// Requires a signing-capable context."},
{"lineNum":"  621","line":"    pub fn sign(&self, msg: &Message, sk: &key::SecretKey)"},
{"lineNum":"  622","line":"                -> Signature {"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"        let mut ret = ffi::Signature::new();"},
{"lineNum":"  625","line":"        unsafe {"},
{"lineNum":"  626","line":"            // We can assume the return value because it\'s not possible to construct"},
{"lineNum":"  627","line":"            // an invalid signature from a valid `Message` and `SecretKey`"},
{"lineNum":"  628","line":"            assert_eq!(ffi::secp256k1_ecdsa_sign(self.ctx, &mut ret, msg.as_c_ptr(),"},
{"lineNum":"  629","line":"                                                 sk.as_c_ptr(), ffi::secp256k1_nonce_function_rfc6979,"},
{"lineNum":"  630","line":"                                                 ptr::null()), 1);"},
{"lineNum":"  631","line":"        }"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"        Signature::from(ret)"},
{"lineNum":"  634","line":"    }"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"    /// Generates a random keypair. Convenience function for `key::SecretKey::new`"},
{"lineNum":"  637","line":"    /// and `key::PublicKey::from_secret_key`; call those functions directly for"},
{"lineNum":"  638","line":"    /// batch key generation. Requires a signing-capable context. Requires compilation"},
{"lineNum":"  639","line":"    /// with the \"rand\" feature."},
{"lineNum":"  640","line":"    #[inline]"},
{"lineNum":"  641","line":"    #[cfg(any(test, feature = \"rand\"))]"},
{"lineNum":"  642","line":"    pub fn generate_keypair<R: Rng + ?Sized>(&self, rng: &mut R)"},
{"lineNum":"  643","line":"                                    -> (key::SecretKey, key::PublicKey) {"},
{"lineNum":"  644","line":"        let sk = key::SecretKey::new(rng);"},
{"lineNum":"  645","line":"        let pk = key::PublicKey::from_secret_key(self, &sk);"},
{"lineNum":"  646","line":"        (sk, pk)"},
{"lineNum":"  647","line":"    }"},
{"lineNum":"  648","line":"}"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"impl<C: Verification> Secp256k1<C> {"},
{"lineNum":"  651","line":"    /// Checks that `sig` is a valid ECDSA signature for `msg` using the public"},
{"lineNum":"  652","line":"    /// key `pubkey`. Returns `Ok(true)` on success. Note that this function cannot"},
{"lineNum":"  653","line":"    /// be used for Bitcoin consensus checking since there may exist signatures"},
{"lineNum":"  654","line":"    /// which OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a"},
{"lineNum":"  655","line":"    /// verify-capable context."},
{"lineNum":"  656","line":"    #[inline]"},
{"lineNum":"  657","line":"    pub fn verify(&self, msg: &Message, sig: &Signature, pk: &key::PublicKey) -> Result<(), Error> {","class":"lineCov","hits":"1","order":"6079","possible_hits":"1",},
{"lineNum":"  658","line":"        unsafe {"},
{"lineNum":"  659","line":"            if ffi::secp256k1_ecdsa_verify(self.ctx, sig.as_c_ptr(), msg.as_c_ptr(), pk.as_c_ptr()) == 0 {","class":"lineCov","hits":"2","order":"6080","possible_hits":"2",},
{"lineNum":"  660","line":"                Err(Error::IncorrectSignature)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"            } else {"},
{"lineNum":"  662","line":"                Ok(())","class":"lineCov","hits":"1","order":"6144","possible_hits":"1",},
{"lineNum":"  663","line":"            }"},
{"lineNum":"  664","line":"        }"},
{"lineNum":"  665","line":"    }","class":"linePartCov","hits":"1","order":"6145","possible_hits":"2",},
{"lineNum":"  666","line":"}"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"/// Utility function used to parse hex into a target u8 buffer. Returns"},
{"lineNum":"  669","line":"/// the number of bytes converted or an error if it encounters an invalid"},
{"lineNum":"  670","line":"/// character or unexpected end of string."},
{"lineNum":"  671","line":"fn from_hex(hex: &str, target: &mut [u8]) -> Result<usize, ()> {"},
{"lineNum":"  672","line":"    if hex.len() % 2 == 1 || hex.len() > target.len() * 2 {"},
{"lineNum":"  673","line":"        return Err(());"},
{"lineNum":"  674","line":"    }"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"    let mut b = 0;"},
{"lineNum":"  677","line":"    let mut idx = 0;"},
{"lineNum":"  678","line":"    for c in hex.bytes() {"},
{"lineNum":"  679","line":"        b <<= 4;"},
{"lineNum":"  680","line":"        match c {"},
{"lineNum":"  681","line":"            b\'A\'...b\'F\' => b |= c - b\'A\' + 10,"},
{"lineNum":"  682","line":"            b\'a\'...b\'f\' => b |= c - b\'a\' + 10,"},
{"lineNum":"  683","line":"            b\'0\'...b\'9\' => b |= c - b\'0\',"},
{"lineNum":"  684","line":"            _ => return Err(()),"},
{"lineNum":"  685","line":"        }"},
{"lineNum":"  686","line":"        if (idx & 1) == 1 {"},
{"lineNum":"  687","line":"            target[idx / 2] = b;"},
{"lineNum":"  688","line":"            b = 0;"},
{"lineNum":"  689","line":"        }"},
{"lineNum":"  690","line":"        idx += 1;"},
{"lineNum":"  691","line":"    }"},
{"lineNum":"  692","line":"    Ok(idx / 2)"},
{"lineNum":"  693","line":"}"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"#[cfg(test)]"},
{"lineNum":"  697","line":"mod tests {"},
{"lineNum":"  698","line":"    use rand::{RngCore, thread_rng};"},
{"lineNum":"  699","line":"    use std::str::FromStr;"},
{"lineNum":"  700","line":"    use std::marker::PhantomData;"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"    use key::{SecretKey, PublicKey};"},
{"lineNum":"  703","line":"    use super::from_hex;"},
{"lineNum":"  704","line":"    use super::constants;"},
{"lineNum":"  705","line":"    use super::{Secp256k1, Signature, Message};"},
{"lineNum":"  706","line":"    use super::Error::{InvalidMessage, IncorrectSignature, InvalidSignature};"},
{"lineNum":"  707","line":"    use ffi;"},
{"lineNum":"  708","line":"    use context::*;"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"    macro_rules! hex {"},
{"lineNum":"  711","line":"        ($hex:expr) => ({"},
{"lineNum":"  712","line":"            let mut result = vec![0; $hex.len() / 2];"},
{"lineNum":"  713","line":"            from_hex($hex, &mut result).expect(\"valid hex string\");"},
{"lineNum":"  714","line":"            result"},
{"lineNum":"  715","line":"        });"},
{"lineNum":"  716","line":"    }"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"    #[test]"},
{"lineNum":"  720","line":"    fn test_manual_create_destroy() {"},
{"lineNum":"  721","line":"        let ctx_full = unsafe { ffi::secp256k1_context_create(AllPreallocated::FLAGS) };"},
{"lineNum":"  722","line":"        let ctx_sign = unsafe { ffi::secp256k1_context_create(SignOnlyPreallocated::FLAGS) };"},
{"lineNum":"  723","line":"        let ctx_vrfy = unsafe { ffi::secp256k1_context_create(VerifyOnlyPreallocated::FLAGS) };"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"        let buf: *mut [u8] = &mut [0u8;0] as _;"},
{"lineNum":"  726","line":"        let full: Secp256k1<AllPreallocated> = Secp256k1{ctx: ctx_full, phantom: PhantomData, buf};"},
{"lineNum":"  727","line":"        let sign: Secp256k1<SignOnlyPreallocated> = Secp256k1{ctx: ctx_sign, phantom: PhantomData, buf};"},
{"lineNum":"  728","line":"        let vrfy: Secp256k1<VerifyOnlyPreallocated> = Secp256k1{ctx: ctx_vrfy, phantom: PhantomData, buf};"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"        let (sk, pk) = full.generate_keypair(&mut thread_rng());"},
{"lineNum":"  731","line":"        let msg = Message::from_slice(&[2u8; 32]).unwrap();"},
{"lineNum":"  732","line":"        // Try signing"},
{"lineNum":"  733","line":"        assert_eq!(sign.sign(&msg, &sk), full.sign(&msg, &sk));"},
{"lineNum":"  734","line":"        let sig = full.sign(&msg, &sk);"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"        // Try verifying"},
{"lineNum":"  737","line":"        assert!(vrfy.verify(&msg, &sig, &pk).is_ok());"},
{"lineNum":"  738","line":"        assert!(full.verify(&msg, &sig, &pk).is_ok());"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"        drop(full);drop(sign);drop(vrfy);"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"        unsafe { ffi::secp256k1_context_destroy(ctx_vrfy) };"},
{"lineNum":"  743","line":"        unsafe { ffi::secp256k1_context_destroy(ctx_sign) };"},
{"lineNum":"  744","line":"        unsafe { ffi::secp256k1_context_destroy(ctx_full) };"},
{"lineNum":"  745","line":"    }"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"    #[test]"},
{"lineNum":"  748","line":"    fn test_preallocation() {"},
{"lineNum":"  749","line":"        let mut buf_ful = vec![0u8; Secp256k1::preallocate_size()];"},
{"lineNum":"  750","line":"        let mut buf_sign = vec![0u8; Secp256k1::preallocate_signing_size()];"},
{"lineNum":"  751","line":"        let mut buf_vfy = vec![0u8; Secp256k1::preallocate_verification_size()];"},
{"lineNum":"  752","line":"//"},
{"lineNum":"  753","line":"        let full = Secp256k1::preallocated_new(&mut buf_ful).unwrap();"},
{"lineNum":"  754","line":"        let sign = Secp256k1::preallocated_signing_only(&mut buf_sign).unwrap();"},
{"lineNum":"  755","line":"        let vrfy = Secp256k1::preallocated_verification_only(&mut buf_vfy).unwrap();"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"//        drop(buf_vfy); // The buffer can\'t get dropped before the context."},
{"lineNum":"  758","line":"//        println!(\"{:?}\", buf_ful[5]); // Can\'t even read the data thanks to the borrow checker."},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"        let (sk, pk) = full.generate_keypair(&mut thread_rng());"},
{"lineNum":"  761","line":"        let msg = Message::from_slice(&[2u8; 32]).unwrap();"},
{"lineNum":"  762","line":"        // Try signing"},
{"lineNum":"  763","line":"        assert_eq!(sign.sign(&msg, &sk), full.sign(&msg, &sk));"},
{"lineNum":"  764","line":"        let sig = full.sign(&msg, &sk);"},
{"lineNum":"  765","line":""},
{"lineNum":"  766","line":"        // Try verifying"},
{"lineNum":"  767","line":"        assert!(vrfy.verify(&msg, &sig, &pk).is_ok());"},
{"lineNum":"  768","line":"        assert!(full.verify(&msg, &sig, &pk).is_ok());"},
{"lineNum":"  769","line":"    }"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"    #[test]"},
{"lineNum":"  772","line":"    fn capabilities() {"},
{"lineNum":"  773","line":"        let sign = Secp256k1::signing_only();"},
{"lineNum":"  774","line":"        let vrfy = Secp256k1::verification_only();"},
{"lineNum":"  775","line":"        let full = Secp256k1::new();"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"        let mut msg = [0u8; 32];"},
{"lineNum":"  778","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  779","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"        // Try key generation"},
{"lineNum":"  782","line":"        let (sk, pk) = full.generate_keypair(&mut thread_rng());"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"        // Try signing"},
{"lineNum":"  785","line":"        assert_eq!(sign.sign(&msg, &sk), full.sign(&msg, &sk));"},
{"lineNum":"  786","line":"        let sig = full.sign(&msg, &sk);"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"        // Try verifying"},
{"lineNum":"  789","line":"        assert!(vrfy.verify(&msg, &sig, &pk).is_ok());"},
{"lineNum":"  790","line":"        assert!(full.verify(&msg, &sig, &pk).is_ok());"},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"        // Check that we can produce keys from slices with no precomputation"},
{"lineNum":"  793","line":"        let (pk_slice, sk_slice) = (&pk.serialize(), &sk[..]);"},
{"lineNum":"  794","line":"        let new_pk = PublicKey::from_slice(pk_slice).unwrap();"},
{"lineNum":"  795","line":"        let new_sk = SecretKey::from_slice(sk_slice).unwrap();"},
{"lineNum":"  796","line":"        assert_eq!(sk, new_sk);"},
{"lineNum":"  797","line":"        assert_eq!(pk, new_pk);"},
{"lineNum":"  798","line":"    }"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"    #[test]"},
{"lineNum":"  801","line":"    fn signature_serialize_roundtrip() {"},
{"lineNum":"  802","line":"        let mut s = Secp256k1::new();"},
{"lineNum":"  803","line":"        s.randomize(&mut thread_rng());"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"        let mut msg = [0; 32];"},
{"lineNum":"  806","line":"        for _ in 0..100 {"},
{"lineNum":"  807","line":"            thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  808","line":"            let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"            let (sk, _) = s.generate_keypair(&mut thread_rng());"},
{"lineNum":"  811","line":"            let sig1 = s.sign(&msg, &sk);"},
{"lineNum":"  812","line":"            let der = sig1.serialize_der();"},
{"lineNum":"  813","line":"            let sig2 = Signature::from_der(&der[..]).unwrap();"},
{"lineNum":"  814","line":"            assert_eq!(sig1, sig2);"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"            let compact = sig1.serialize_compact();"},
{"lineNum":"  817","line":"            let sig2 = Signature::from_compact(&compact[..]).unwrap();"},
{"lineNum":"  818","line":"            assert_eq!(sig1, sig2);"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"            assert!(Signature::from_compact(&der[..]).is_err());"},
{"lineNum":"  821","line":"            assert!(Signature::from_compact(&compact[0..4]).is_err());"},
{"lineNum":"  822","line":"            assert!(Signature::from_der(&compact[..]).is_err());"},
{"lineNum":"  823","line":"            assert!(Signature::from_der(&der[0..4]).is_err());"},
{"lineNum":"  824","line":"         }"},
{"lineNum":"  825","line":"    }"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"    #[test]"},
{"lineNum":"  828","line":"    fn signature_display() {"},
{"lineNum":"  829","line":"        let hex_str = \"3046022100839c1fbc5304de944f697c9f4b1d01d1faeba32d751c0f7acb21ac8a0f436a72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab45\";"},
{"lineNum":"  830","line":"        let byte_str = hex!(hex_str);"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"        assert_eq!("},
{"lineNum":"  833","line":"            Signature::from_der(&byte_str).expect(\"byte str decode\"),"},
{"lineNum":"  834","line":"            Signature::from_str(&hex_str).expect(\"byte str decode\")"},
{"lineNum":"  835","line":"        );"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"        let sig = Signature::from_str(&hex_str).expect(\"byte str decode\");"},
{"lineNum":"  838","line":"        assert_eq!(&sig.to_string(), hex_str);"},
{"lineNum":"  839","line":"        assert_eq!(&format!(\"{:?}\", sig), hex_str);"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"        assert!(Signature::from_str("},
{"lineNum":"  842","line":"            \"3046022100839c1fbc5304de944f697c9f4b1d01d1faeba32d751c0f7acb21ac8a0f436a\\"},
{"lineNum":"  843","line":"             72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab4\""},
{"lineNum":"  844","line":"        ).is_err());"},
{"lineNum":"  845","line":"        assert!(Signature::from_str("},
{"lineNum":"  846","line":"            \"3046022100839c1fbc5304de944f697c9f4b1d01d1faeba32d751c0f7acb21ac8a0f436a\\"},
{"lineNum":"  847","line":"             72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab\""},
{"lineNum":"  848","line":"        ).is_err());"},
{"lineNum":"  849","line":"        assert!(Signature::from_str("},
{"lineNum":"  850","line":"            \"3046022100839c1fbc5304de944f697c9f4b1d01d1faeba32d751c0f7acb21ac8a0f436a\\"},
{"lineNum":"  851","line":"             72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eabxx\""},
{"lineNum":"  852","line":"        ).is_err());"},
{"lineNum":"  853","line":"        assert!(Signature::from_str("},
{"lineNum":"  854","line":"            \"3046022100839c1fbc5304de944f697c9f4b1d01d1faeba32d751c0f7acb21ac8a0f436a\\"},
{"lineNum":"  855","line":"             72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab45\\"},
{"lineNum":"  856","line":"             72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab45\\"},
{"lineNum":"  857","line":"             72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab45\\"},
{"lineNum":"  858","line":"             72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab45\\"},
{"lineNum":"  859","line":"             72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab45\""},
{"lineNum":"  860","line":"        ).is_err());"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"        // 71 byte signature"},
{"lineNum":"  863","line":"        let hex_str = \"30450221009d0bad576719d32ae76bedb34c774866673cbde3f4e12951555c9408e6ce774b02202876e7102f204f6bfee26c967c3926ce702cf97d4b010062e193f763190f6776\";"},
{"lineNum":"  864","line":"        let sig = Signature::from_str(&hex_str).expect(\"byte str decode\");"},
{"lineNum":"  865","line":"        assert_eq!(&format!(\"{}\", sig), hex_str);"},
{"lineNum":"  866","line":"    }"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"    #[test]"},
{"lineNum":"  869","line":"    fn signature_lax_der() {"},
{"lineNum":"  870","line":"        macro_rules! check_lax_sig("},
{"lineNum":"  871","line":"            ($hex:expr) => ({"},
{"lineNum":"  872","line":"                let sig = hex!($hex);"},
{"lineNum":"  873","line":"                assert!(Signature::from_der_lax(&sig[..]).is_ok());"},
{"lineNum":"  874","line":"            })"},
{"lineNum":"  875","line":"        );"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"        check_lax_sig!(\"304402204c2dd8a9b6f8d425fcd8ee9a20ac73b619906a6367eac6cb93e70375225ec0160220356878eff111ff3663d7e6bf08947f94443845e0dcc54961664d922f7660b80c\");"},
{"lineNum":"  878","line":"        check_lax_sig!(\"304402202ea9d51c7173b1d96d331bd41b3d1b4e78e66148e64ed5992abd6ca66290321c0220628c47517e049b3e41509e9d71e480a0cdc766f8cdec265ef0017711c1b5336f\");"},
{"lineNum":"  879","line":"        check_lax_sig!(\"3045022100bf8e050c85ffa1c313108ad8c482c4849027937916374617af3f2e9a881861c9022023f65814222cab09d5ec41032ce9c72ca96a5676020736614de7b78a4e55325a\");"},
{"lineNum":"  880","line":"        check_lax_sig!(\"3046022100839c1fbc5304de944f697c9f4b1d01d1faeba32d751c0f7acb21ac8a0f436a72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab45\");"},
{"lineNum":"  881","line":"        check_lax_sig!(\"3046022100eaa5f90483eb20224616775891397d47efa64c68b969db1dacb1c30acdfc50aa022100cf9903bbefb1c8000cf482b0aeeb5af19287af20bd794de11d82716f9bae3db1\");"},
{"lineNum":"  882","line":"        check_lax_sig!(\"3045022047d512bc85842ac463ca3b669b62666ab8672ee60725b6c06759e476cebdc6c102210083805e93bd941770109bcc797784a71db9e48913f702c56e60b1c3e2ff379a60\");"},
{"lineNum":"  883","line":"        check_lax_sig!(\"3044022023ee4e95151b2fbbb08a72f35babe02830d14d54bd7ed1320e4751751d1baa4802206235245254f58fd1be6ff19ca291817da76da65c2f6d81d654b5185dd86b8acf\");"},
{"lineNum":"  884","line":"    }"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"    #[test]"},
{"lineNum":"  887","line":"    fn sign_and_verify() {"},
{"lineNum":"  888","line":"        let mut s = Secp256k1::new();"},
{"lineNum":"  889","line":"        s.randomize(&mut thread_rng());"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"        let mut msg = [0; 32];"},
{"lineNum":"  892","line":"        for _ in 0..100 {"},
{"lineNum":"  893","line":"            thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  894","line":"            let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"            let (sk, pk) = s.generate_keypair(&mut thread_rng());"},
{"lineNum":"  897","line":"            let sig = s.sign(&msg, &sk);"},
{"lineNum":"  898","line":"            assert_eq!(s.verify(&msg, &sig, &pk), Ok(()));"},
{"lineNum":"  899","line":"         }"},
{"lineNum":"  900","line":"    }"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"    #[test]"},
{"lineNum":"  903","line":"    fn sign_and_verify_extreme() {"},
{"lineNum":"  904","line":"        let mut s = Secp256k1::new();"},
{"lineNum":"  905","line":"        s.randomize(&mut thread_rng());"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"        // Wild keys: 1, CURVE_ORDER - 1"},
{"lineNum":"  908","line":"        // Wild msgs: 1, CURVE_ORDER - 1"},
{"lineNum":"  909","line":"        let mut wild_keys = [[0; 32]; 2];"},
{"lineNum":"  910","line":"        let mut wild_msgs = [[0; 32]; 2];"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"        wild_keys[0][0] = 1;"},
{"lineNum":"  913","line":"        wild_msgs[0][0] = 1;"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"        use constants;"},
{"lineNum":"  916","line":"        wild_keys[1][..].copy_from_slice(&constants::CURVE_ORDER[..]);"},
{"lineNum":"  917","line":"        wild_msgs[1][..].copy_from_slice(&constants::CURVE_ORDER[..]);"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"        wild_keys[1][0] -= 1;"},
{"lineNum":"  920","line":"        wild_msgs[1][0] -= 1;"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"        for key in wild_keys.iter().map(|k| SecretKey::from_slice(&k[..]).unwrap()) {"},
{"lineNum":"  923","line":"            for msg in wild_msgs.iter().map(|m| Message::from_slice(&m[..]).unwrap()) {"},
{"lineNum":"  924","line":"                let sig = s.sign(&msg, &key);"},
{"lineNum":"  925","line":"                let pk = PublicKey::from_secret_key(&s, &key);"},
{"lineNum":"  926","line":"                assert_eq!(s.verify(&msg, &sig, &pk), Ok(()));"},
{"lineNum":"  927","line":"            }"},
{"lineNum":"  928","line":"        }"},
{"lineNum":"  929","line":"    }"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"    #[test]"},
{"lineNum":"  932","line":"    fn sign_and_verify_fail() {"},
{"lineNum":"  933","line":"        let mut s = Secp256k1::new();"},
{"lineNum":"  934","line":"        s.randomize(&mut thread_rng());"},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"        let mut msg = [0u8; 32];"},
{"lineNum":"  937","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  938","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"        let (sk, pk) = s.generate_keypair(&mut thread_rng());"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"        let sig = s.sign(&msg, &sk);"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"        let mut msg = [0u8; 32];"},
{"lineNum":"  945","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  946","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  947","line":"        assert_eq!(s.verify(&msg, &sig, &pk), Err(IncorrectSignature));"},
{"lineNum":"  948","line":"    }"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"    #[test]"},
{"lineNum":"  951","line":"    fn test_bad_slice() {"},
{"lineNum":"  952","line":"        assert_eq!(Signature::from_der(&[0; constants::MAX_SIGNATURE_SIZE + 1]),"},
{"lineNum":"  953","line":"                   Err(InvalidSignature));"},
{"lineNum":"  954","line":"        assert_eq!(Signature::from_der(&[0; constants::MAX_SIGNATURE_SIZE]),"},
{"lineNum":"  955","line":"                   Err(InvalidSignature));"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"        assert_eq!(Message::from_slice(&[0; constants::MESSAGE_SIZE - 1]),"},
{"lineNum":"  958","line":"                   Err(InvalidMessage));"},
{"lineNum":"  959","line":"        assert_eq!(Message::from_slice(&[0; constants::MESSAGE_SIZE + 1]),"},
{"lineNum":"  960","line":"                   Err(InvalidMessage));"},
{"lineNum":"  961","line":"        assert_eq!("},
{"lineNum":"  962","line":"            Message::from_slice(&[0; constants::MESSAGE_SIZE]),"},
{"lineNum":"  963","line":"            Err(InvalidMessage)"},
{"lineNum":"  964","line":"        );"},
{"lineNum":"  965","line":"        assert!(Message::from_slice(&[1; constants::MESSAGE_SIZE]).is_ok());"},
{"lineNum":"  966","line":"    }"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"    #[test]"},
{"lineNum":"  969","line":"    fn test_low_s() {"},
{"lineNum":"  970","line":"        // nb this is a transaction on testnet"},
{"lineNum":"  971","line":"        // txid 8ccc87b72d766ab3128f03176bb1c98293f2d1f85ebfaf07b82cc81ea6891fa9"},
{"lineNum":"  972","line":"        //      input number 3"},
{"lineNum":"  973","line":"        let sig = hex!(\"3046022100839c1fbc5304de944f697c9f4b1d01d1faeba32d751c0f7acb21ac8a0f436a72022100e89bd46bb3a5a62adc679f659b7ce876d83ee297c7a5587b2011c4fcc72eab45\");"},
{"lineNum":"  974","line":"        let pk = hex!(\"031ee99d2b786ab3b0991325f2de8489246a6a3fdb700f6d0511b1d80cf5f4cd43\");"},
{"lineNum":"  975","line":"        let msg = hex!(\"a4965ca63b7d8562736ceec36dfa5a11bf426eb65be8ea3f7a49ae363032da0d\");"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"        let secp = Secp256k1::new();"},
{"lineNum":"  978","line":"        let mut sig = Signature::from_der(&sig[..]).unwrap();"},
{"lineNum":"  979","line":"        let pk = PublicKey::from_slice(&pk[..]).unwrap();"},
{"lineNum":"  980","line":"        let msg = Message::from_slice(&msg[..]).unwrap();"},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"        // without normalization we expect this will fail"},
{"lineNum":"  983","line":"        assert_eq!(secp.verify(&msg, &sig, &pk), Err(IncorrectSignature));"},
{"lineNum":"  984","line":"        // after normalization it should pass"},
{"lineNum":"  985","line":"        sig.normalize_s();"},
{"lineNum":"  986","line":"        assert_eq!(secp.verify(&msg, &sig, &pk), Ok(()));"},
{"lineNum":"  987","line":"    }"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  990","line":"    #[test]"},
{"lineNum":"  991","line":"    fn test_signature_serde() {"},
{"lineNum":"  992","line":"        use serde_test::{Configure, Token, assert_tokens};"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"        let s = Secp256k1::new();"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"        let msg = Message::from_slice(&[1; 32]).unwrap();"},
{"lineNum":"  997","line":"        let sk = SecretKey::from_slice(&[2; 32]).unwrap();"},
{"lineNum":"  998","line":"        let sig = s.sign(&msg, &sk);"},
{"lineNum":"  999","line":"        static SIG_BYTES: [u8; 71] = ["},
{"lineNum":" 1000","line":"            48, 69, 2, 33, 0, 157, 11, 173, 87, 103, 25, 211, 42, 231, 107, 237,"},
{"lineNum":" 1001","line":"            179, 76, 119, 72, 102, 103, 60, 189, 227, 244, 225, 41, 81, 85, 92, 148,"},
{"lineNum":" 1002","line":"            8, 230, 206, 119, 75, 2, 32, 40, 118, 231, 16, 47, 32, 79, 107, 254,"},
{"lineNum":" 1003","line":"            226, 108, 150, 124, 57, 38, 206, 112, 44, 249, 125, 75, 1, 0, 98, 225,"},
{"lineNum":" 1004","line":"            147, 247, 99, 25, 15, 103, 118"},
{"lineNum":" 1005","line":"        ];"},
{"lineNum":" 1006","line":"        static SIG_STR: &\'static str = \"\\"},
{"lineNum":" 1007","line":"            30450221009d0bad576719d32ae76bedb34c774866673cbde3f4e12951555c9408e6ce77\\"},
{"lineNum":" 1008","line":"            4b02202876e7102f204f6bfee26c967c3926ce702cf97d4b010062e193f763190f6776\\"},
{"lineNum":" 1009","line":"        \";"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"        assert_tokens(&sig.compact(), &[Token::BorrowedBytes(&SIG_BYTES[..])]);"},
{"lineNum":" 1012","line":"        assert_tokens(&sig.readable(), &[Token::BorrowedStr(SIG_STR)]);"},
{"lineNum":" 1013","line":"    }"},
{"lineNum":" 1014","line":"}"},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":"#[cfg(all(test, feature = \"unstable\"))]"},
{"lineNum":" 1017","line":"mod benches {"},
{"lineNum":" 1018","line":"    use rand::{thread_rng, RngCore};"},
{"lineNum":" 1019","line":"    use test::{Bencher, black_box};"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"    use super::{Secp256k1, Message};"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"    #[bench]"},
{"lineNum":" 1024","line":"    pub fn generate(bh: &mut Bencher) {"},
{"lineNum":" 1025","line":"        struct CounterRng(u64);"},
{"lineNum":" 1026","line":"        impl RngCore for CounterRng {"},
{"lineNum":" 1027","line":"            fn next_u32(&mut self) -> u32 {"},
{"lineNum":" 1028","line":"                self.next_u64() as u32"},
{"lineNum":" 1029","line":"            }"},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":"            fn next_u64(&mut self) -> u64 {"},
{"lineNum":" 1032","line":"                self.0 += 1;"},
{"lineNum":" 1033","line":"                self.0"},
{"lineNum":" 1034","line":"            }"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"            fn fill_bytes(&mut self, dest: &mut [u8]) {"},
{"lineNum":" 1037","line":"                for chunk in dest.chunks_mut(64/8) {"},
{"lineNum":" 1038","line":"                    let rand: [u8; 64/8] = unsafe {std::mem::transmute(self.next_u64())};"},
{"lineNum":" 1039","line":"                    chunk.copy_from_slice(&rand[..chunk.len()]);"},
{"lineNum":" 1040","line":"                }"},
{"lineNum":" 1041","line":"            }"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":"            fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> {"},
{"lineNum":" 1044","line":"                Ok(self.fill_bytes(dest))"},
{"lineNum":" 1045","line":"            }"},
{"lineNum":" 1046","line":"        }"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"        let s = Secp256k1::new();"},
{"lineNum":" 1050","line":"        let mut r = CounterRng(0);"},
{"lineNum":" 1051","line":"        bh.iter( || {"},
{"lineNum":" 1052","line":"            let (sk, pk) = s.generate_keypair(&mut r);"},
{"lineNum":" 1053","line":"            black_box(sk);"},
{"lineNum":" 1054","line":"            black_box(pk);"},
{"lineNum":" 1055","line":"        });"},
{"lineNum":" 1056","line":"    }"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"    #[bench]"},
{"lineNum":" 1059","line":"    pub fn bench_sign(bh: &mut Bencher) {"},
{"lineNum":" 1060","line":"        let s = Secp256k1::new();"},
{"lineNum":" 1061","line":"        let mut msg = [0u8; 32];"},
{"lineNum":" 1062","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":" 1063","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":" 1064","line":"        let (sk, _) = s.generate_keypair(&mut thread_rng());"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"        bh.iter(|| {"},
{"lineNum":" 1067","line":"            let sig = s.sign(&msg, &sk);"},
{"lineNum":" 1068","line":"            black_box(sig);"},
{"lineNum":" 1069","line":"        });"},
{"lineNum":" 1070","line":"    }"},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"    #[bench]"},
{"lineNum":" 1073","line":"    pub fn bench_verify(bh: &mut Bencher) {"},
{"lineNum":" 1074","line":"        let s = Secp256k1::new();"},
{"lineNum":" 1075","line":"        let mut msg = [0u8; 32];"},
{"lineNum":" 1076","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":" 1077","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":" 1078","line":"        let (sk, pk) = s.generate_keypair(&mut thread_rng());"},
{"lineNum":" 1079","line":"        let sig = s.sign(&msg, &sk);"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":"        bh.iter(|| {"},
{"lineNum":" 1082","line":"            let res = s.verify(&msg, &sig, &pk).unwrap();"},
{"lineNum":" 1083","line":"            black_box(res);"},
{"lineNum":" 1084","line":"        });"},
{"lineNum":" 1085","line":"    }"},
{"lineNum":" 1086","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-3332d6d4aab2c25c", "date" : "2020-05-23 13:12:48", "instrumented" : 28, "covered" : 24,};
var merged_data = [];
